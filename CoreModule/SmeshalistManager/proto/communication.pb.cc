// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: communication.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "communication.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sm {

namespace {

const ::google::protobuf::Descriptor* ElementInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ElementInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ElementsCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ElementsCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* ElementsCount_ElementInfosEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BoundingBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoundingBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* Color_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Color_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupsInfo_AllGroupsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StatisticsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatisticsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CoreToManagerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoreToManagerMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CoreToManagerMessage_CTMMessageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OptionsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptionsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TypesFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TypesFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* TypesFilter_SelectedTypesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GroupsFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupsFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupsFilter_SelectedGroupsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* QualityCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QualityCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* QualityFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QualityFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CoordinatesCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoordinatesCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* CoordinatesFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoordinatesFilter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CoordinatesFilter_Conjunction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ManagerToCoreMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManagerToCoreMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ManagerToCoreMessage_MTCMessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ColoringType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VisualisationMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ComparisonOperator_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_communication_2eproto() {
  protobuf_AddDesc_communication_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "communication.proto");
  GOOGLE_CHECK(file != NULL);
  ElementInfo_descriptor_ = file->message_type(0);
  static const int ElementInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementInfo, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementInfo, visible_),
  };
  ElementInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ElementInfo_descriptor_,
      ElementInfo::default_instance_,
      ElementInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ElementInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementInfo, _internal_metadata_),
      -1);
  ElementsCount_descriptor_ = file->message_type(1);
  static const int ElementsCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementsCount, elementinfos_),
  };
  ElementsCount_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ElementsCount_descriptor_,
      ElementsCount::default_instance_,
      ElementsCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementsCount, _has_bits_[0]),
      -1,
      -1,
      sizeof(ElementsCount),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementsCount, _internal_metadata_),
      -1);
  ElementsCount_ElementInfosEntry_descriptor_ = ElementsCount_descriptor_->nested_type(0);
  BoundingBox_descriptor_ = file->message_type(2);
  static const int BoundingBox_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, fromx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, tox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, fromy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, toy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, fromz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, toz_),
  };
  BoundingBox_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BoundingBox_descriptor_,
      BoundingBox::default_instance_,
      BoundingBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, _has_bits_[0]),
      -1,
      -1,
      sizeof(BoundingBox),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, _internal_metadata_),
      -1);
  Color_descriptor_ = file->message_type(3);
  static const int Color_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, b_),
  };
  Color_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Color_descriptor_,
      Color::default_instance_,
      Color_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _has_bits_[0]),
      -1,
      -1,
      sizeof(Color),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _internal_metadata_),
      -1);
  GroupsInfo_descriptor_ = file->message_type(4);
  static const int GroupsInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupsInfo, allgroups_),
  };
  GroupsInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GroupsInfo_descriptor_,
      GroupsInfo::default_instance_,
      GroupsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupsInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(GroupsInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupsInfo, _internal_metadata_),
      -1);
  GroupsInfo_AllGroupsEntry_descriptor_ = GroupsInfo_descriptor_->nested_type(0);
  StatisticsInfo_descriptor_ = file->message_type(5);
  static const int StatisticsInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsInfo, elementscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsInfo, boundingbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsInfo, groupsinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsInfo, treename_),
  };
  StatisticsInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatisticsInfo_descriptor_,
      StatisticsInfo::default_instance_,
      StatisticsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(StatisticsInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsInfo, _internal_metadata_),
      -1);
  CoreToManagerMessage_descriptor_ = file->message_type(6);
  static const int CoreToManagerMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoreToManagerMessage, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoreToManagerMessage, statisticsinfo_),
  };
  CoreToManagerMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CoreToManagerMessage_descriptor_,
      CoreToManagerMessage::default_instance_,
      CoreToManagerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoreToManagerMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(CoreToManagerMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoreToManagerMessage, _internal_metadata_),
      -1);
  CoreToManagerMessage_CTMMessageType_descriptor_ = CoreToManagerMessage_descriptor_->enum_type(0);
  OptionsInfo_descriptor_ = file->message_type(7);
  static const int OptionsInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsInfo, transparentstructures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsInfo, dynamicrendering_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsInfo, showlabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsInfo, mousesensitivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsInfo, coloringtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsInfo, visualisationmode_),
  };
  OptionsInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OptionsInfo_descriptor_,
      OptionsInfo::default_instance_,
      OptionsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(OptionsInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionsInfo, _internal_metadata_),
      -1);
  TypesFilter_descriptor_ = file->message_type(8);
  static const int TypesFilter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypesFilter, selectedtypes_),
  };
  TypesFilter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TypesFilter_descriptor_,
      TypesFilter::default_instance_,
      TypesFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypesFilter, _has_bits_[0]),
      -1,
      -1,
      sizeof(TypesFilter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypesFilter, _internal_metadata_),
      -1);
  TypesFilter_SelectedTypesEntry_descriptor_ = TypesFilter_descriptor_->nested_type(0);
  GroupsFilter_descriptor_ = file->message_type(9);
  static const int GroupsFilter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupsFilter, selectedgroups_),
  };
  GroupsFilter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GroupsFilter_descriptor_,
      GroupsFilter::default_instance_,
      GroupsFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupsFilter, _has_bits_[0]),
      -1,
      -1,
      sizeof(GroupsFilter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupsFilter, _internal_metadata_),
      -1);
  GroupsFilter_SelectedGroupsEntry_descriptor_ = GroupsFilter_descriptor_->nested_type(0);
  QualityCondition_descriptor_ = file->message_type(10);
  static const int QualityCondition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityCondition, leftvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityCondition, leftoperator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityCondition, rightoperator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityCondition, rightvalue_),
  };
  QualityCondition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QualityCondition_descriptor_,
      QualityCondition::default_instance_,
      QualityCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityCondition, _has_bits_[0]),
      -1,
      -1,
      sizeof(QualityCondition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityCondition, _internal_metadata_),
      -1);
  QualityFilter_descriptor_ = file->message_type(11);
  static const int QualityFilter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityFilter, qualitycondition_),
  };
  QualityFilter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QualityFilter_descriptor_,
      QualityFilter::default_instance_,
      QualityFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityFilter, _has_bits_[0]),
      -1,
      -1,
      sizeof(QualityFilter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityFilter, _internal_metadata_),
      -1);
  CoordinatesCondition_descriptor_ = file->message_type(12);
  static const int CoordinatesCondition_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordinatesCondition, xvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordinatesCondition, yvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordinatesCondition, zvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordinatesCondition, coordinatesoperator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordinatesCondition, constant_),
  };
  CoordinatesCondition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CoordinatesCondition_descriptor_,
      CoordinatesCondition::default_instance_,
      CoordinatesCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordinatesCondition, _has_bits_[0]),
      -1,
      -1,
      sizeof(CoordinatesCondition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordinatesCondition, _internal_metadata_),
      -1);
  CoordinatesFilter_descriptor_ = file->message_type(13);
  static const int CoordinatesFilter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordinatesFilter, coordinatescondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordinatesFilter, conjunction_),
  };
  CoordinatesFilter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CoordinatesFilter_descriptor_,
      CoordinatesFilter::default_instance_,
      CoordinatesFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordinatesFilter, _has_bits_[0]),
      -1,
      -1,
      sizeof(CoordinatesFilter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordinatesFilter, _internal_metadata_),
      -1);
  CoordinatesFilter_Conjunction_descriptor_ = CoordinatesFilter_descriptor_->enum_type(0);
  ManagerToCoreMessage_descriptor_ = file->message_type(14);
  static const int ManagerToCoreMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerToCoreMessage, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerToCoreMessage, optionsinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerToCoreMessage, groupsfilter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerToCoreMessage, typesfilter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerToCoreMessage, qualityfilter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerToCoreMessage, coordinatesfilter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerToCoreMessage, objfilepath_),
  };
  ManagerToCoreMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ManagerToCoreMessage_descriptor_,
      ManagerToCoreMessage::default_instance_,
      ManagerToCoreMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerToCoreMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(ManagerToCoreMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerToCoreMessage, _internal_metadata_),
      -1);
  ManagerToCoreMessage_MTCMessageType_descriptor_ = ManagerToCoreMessage_descriptor_->enum_type(0);
  ColoringType_descriptor_ = file->enum_type(0);
  VisualisationMode_descriptor_ = file->enum_type(1);
  ComparisonOperator_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_communication_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ElementInfo_descriptor_, &ElementInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ElementsCount_descriptor_, &ElementsCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ElementsCount_ElementInfosEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::sm::ElementInfo,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                ElementsCount_ElementInfosEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BoundingBox_descriptor_, &BoundingBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Color_descriptor_, &Color::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GroupsInfo_descriptor_, &GroupsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        GroupsInfo_AllGroupsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::sm::Color,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                GroupsInfo_AllGroupsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatisticsInfo_descriptor_, &StatisticsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CoreToManagerMessage_descriptor_, &CoreToManagerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OptionsInfo_descriptor_, &OptionsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TypesFilter_descriptor_, &TypesFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TypesFilter_SelectedTypesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            bool,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
            0>::CreateDefaultInstance(
                TypesFilter_SelectedTypesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GroupsFilter_descriptor_, &GroupsFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        GroupsFilter_SelectedGroupsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            bool,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
            0>::CreateDefaultInstance(
                GroupsFilter_SelectedGroupsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QualityCondition_descriptor_, &QualityCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QualityFilter_descriptor_, &QualityFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CoordinatesCondition_descriptor_, &CoordinatesCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CoordinatesFilter_descriptor_, &CoordinatesFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ManagerToCoreMessage_descriptor_, &ManagerToCoreMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_communication_2eproto() {
  delete ElementInfo::default_instance_;
  delete ElementInfo_reflection_;
  delete ElementsCount::default_instance_;
  delete ElementsCount_reflection_;
  delete BoundingBox::default_instance_;
  delete BoundingBox_reflection_;
  delete Color::default_instance_;
  delete Color_reflection_;
  delete GroupsInfo::default_instance_;
  delete GroupsInfo_reflection_;
  delete StatisticsInfo::default_instance_;
  delete StatisticsInfo_reflection_;
  delete CoreToManagerMessage::default_instance_;
  delete CoreToManagerMessage_reflection_;
  delete OptionsInfo::default_instance_;
  delete OptionsInfo_reflection_;
  delete TypesFilter::default_instance_;
  delete TypesFilter_reflection_;
  delete GroupsFilter::default_instance_;
  delete GroupsFilter_reflection_;
  delete QualityCondition::default_instance_;
  delete QualityCondition_reflection_;
  delete QualityFilter::default_instance_;
  delete QualityFilter_reflection_;
  delete CoordinatesCondition::default_instance_;
  delete CoordinatesCondition_reflection_;
  delete CoordinatesFilter::default_instance_;
  delete CoordinatesFilter_reflection_;
  delete ManagerToCoreMessage::default_instance_;
  delete ManagerToCoreMessage_reflection_;
}

void protobuf_AddDesc_communication_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023communication.proto\022\002sm\"-\n\013ElementInfo"
    "\022\r\n\005total\030\001 \002(\005\022\017\n\007visible\030\002 \002(\005\"\220\001\n\rEle"
    "mentsCount\0229\n\014elementInfos\030\001 \003(\0132#.sm.El"
    "ementsCount.ElementInfosEntry\032D\n\021Element"
    "InfosEntry\022\013\n\003key\030\001 \001(\t\022\036\n\005value\030\002 \001(\0132\017"
    ".sm.ElementInfo:\0028\001\"a\n\013BoundingBox\022\r\n\005fr"
    "omX\030\001 \002(\001\022\013\n\003toX\030\002 \002(\001\022\r\n\005fromY\030\003 \002(\001\022\013\n"
    "\003toY\030\004 \002(\001\022\r\n\005fromZ\030\005 \002(\001\022\013\n\003toZ\030\006 \002(\001\"("
    "\n\005Color\022\t\n\001r\030\001 \002(\005\022\t\n\001g\030\002 \002(\005\022\t\n\001b\030\003 \002(\005"
    "\"{\n\nGroupsInfo\0220\n\tallGroups\030\001 \003(\0132\035.sm.G"
    "roupsInfo.AllGroupsEntry\032;\n\016AllGroupsEnt"
    "ry\022\013\n\003key\030\001 \001(\005\022\030\n\005value\030\002 \001(\0132\t.sm.Colo"
    "r:\0028\001\"\226\001\n\016StatisticsInfo\022(\n\relementsCoun"
    "t\030\001 \002(\0132\021.sm.ElementsCount\022$\n\013boundingBo"
    "x\030\002 \002(\0132\017.sm.BoundingBox\022\"\n\ngroupsInfo\030\003"
    " \002(\0132\016.sm.GroupsInfo\022\020\n\010treeName\030\004 \002(\t\"\302"
    "\001\n\024CoreToManagerMessage\022<\n\013messageType\030\001"
    " \002(\0162\'.sm.CoreToManagerMessage.CTMMessag"
    "eType\022*\n\016statisticsInfo\030\002 \001(\0132\022.sm.Stati"
    "sticsInfo\"@\n\016CTMMessageType\022\016\n\nSTATISTIC"
    "S\020\001\022\016\n\nBREAKPOINT\020\002\022\016\n\nHARD_RESET\020\003\"\316\001\n\013"
    "OptionsInfo\022\035\n\025transparentStructures\030\001 \002"
    "(\010\022\030\n\020dynamicRendering\030\002 \002(\010\022\022\n\nshowLabe"
    "ls\030\003 \002(\010\022\030\n\020mouseSensitivity\030\004 \002(\001\022&\n\014co"
    "loringType\030\005 \002(\0162\020.sm.ColoringType\0220\n\021vi"
    "sualisationMode\030\006 \002(\0162\025.sm.Visualisation"
    "Mode\"~\n\013TypesFilter\0229\n\rselectedTypes\030\001 \003"
    "(\0132\".sm.TypesFilter.SelectedTypesEntry\0324"
    "\n\022SelectedTypesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
    "ue\030\002 \001(\010:\0028\001\"\203\001\n\014GroupsFilter\022<\n\016selecte"
    "dGroups\030\001 \003(\0132$.sm.GroupsFilter.Selected"
    "GroupsEntry\0325\n\023SelectedGroupsEntry\022\013\n\003ke"
    "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\010:\0028\001\"\226\001\n\020QualityCo"
    "ndition\022\021\n\tleftValue\030\001 \001(\001\022,\n\014leftOperat"
    "or\030\002 \001(\0162\026.sm.ComparisonOperator\022-\n\rrigh"
    "tOperator\030\003 \001(\0162\026.sm.ComparisonOperator\022"
    "\022\n\nrightValue\030\004 \001(\001\"\?\n\rQualityFilter\022.\n\020"
    "qualityCondition\030\001 \003(\0132\024.sm.QualityCondi"
    "tion\"\215\001\n\024CoordinatesCondition\022\016\n\006xValue\030"
    "\001 \002(\001\022\016\n\006yValue\030\002 \002(\001\022\016\n\006zValue\030\003 \002(\001\0223\n"
    "\023coordinatesOperator\030\004 \002(\0162\026.sm.Comparis"
    "onOperator\022\020\n\010constant\030\005 \002(\001\"\243\001\n\021Coordin"
    "atesFilter\0226\n\024coordinatesCondition\030\001 \003(\013"
    "2\030.sm.CoordinatesCondition\0226\n\013conjunctio"
    "n\030\002 \001(\0162!.sm.CoordinatesFilter.Conjuncti"
    "on\"\036\n\013Conjunction\022\007\n\003AND\020\001\022\006\n\002OR\020\002\"\331\003\n\024M"
    "anagerToCoreMessage\022<\n\013messageType\030\001 \002(\016"
    "2\'.sm.ManagerToCoreMessage.MTCMessageTyp"
    "e\022$\n\013optionsInfo\030\002 \001(\0132\017.sm.OptionsInfo\022"
    "&\n\014groupsFilter\030\003 \001(\0132\020.sm.GroupsFilter\022"
    "$\n\013typesFilter\030\004 \001(\0132\017.sm.TypesFilter\022(\n"
    "\rqualityFilter\030\005 \001(\0132\021.sm.QualityFilter\022"
    "0\n\021coordinatesFilter\030\006 \001(\0132\025.sm.Coordina"
    "tesFilter\022\023\n\013objFilePath\030\007 \001(\t\"\235\001\n\016MTCMe"
    "ssageType\022\013\n\007OPTIONS\020\001\022\013\n\007FILTERS\020\002\022\014\n\010C"
    "ONTINUE\020\003\022\t\n\005ABORT\020\004\022\t\n\005HELLO\020\005\022\014\n\010SNAPS"
    "HOT\020\006\022\t\n\005CLEAN\020\007\022\r\n\tNEXT_TREE\020\010\022\r\n\tPREV_"
    "TREE\020\t\022\n\n\006IMPORT\020\n\022\n\n\006EXPORT\020\013*9\n\014Colori"
    "ngType\022\023\n\017GROUPS_COLORING\020\001\022\024\n\020QUALITY_C"
    "OLORING\020\002*-\n\021VisualisationMode\022\013\n\007MODE_3"
    "D\020\001\022\013\n\007MODE_2D\020\002*_\n\022ComparisonOperator\022\024"
    "\n\020GREATER_OR_EQUAL\020\001\022\013\n\007GREATER\020\002\022\t\n\005EQU"
    "AL\020\003\022\021\n\rLESS_OR_EQUAL\020\004\022\010\n\004LESS\020\005B\036\n\rcom"
    "municationB\rCommunication", 2545);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "communication.proto", &protobuf_RegisterTypes);
  ElementInfo::default_instance_ = new ElementInfo();
  ElementsCount::default_instance_ = new ElementsCount();
  BoundingBox::default_instance_ = new BoundingBox();
  Color::default_instance_ = new Color();
  GroupsInfo::default_instance_ = new GroupsInfo();
  StatisticsInfo::default_instance_ = new StatisticsInfo();
  CoreToManagerMessage::default_instance_ = new CoreToManagerMessage();
  OptionsInfo::default_instance_ = new OptionsInfo();
  TypesFilter::default_instance_ = new TypesFilter();
  GroupsFilter::default_instance_ = new GroupsFilter();
  QualityCondition::default_instance_ = new QualityCondition();
  QualityFilter::default_instance_ = new QualityFilter();
  CoordinatesCondition::default_instance_ = new CoordinatesCondition();
  CoordinatesFilter::default_instance_ = new CoordinatesFilter();
  ManagerToCoreMessage::default_instance_ = new ManagerToCoreMessage();
  ElementInfo::default_instance_->InitAsDefaultInstance();
  ElementsCount::default_instance_->InitAsDefaultInstance();
  BoundingBox::default_instance_->InitAsDefaultInstance();
  Color::default_instance_->InitAsDefaultInstance();
  GroupsInfo::default_instance_->InitAsDefaultInstance();
  StatisticsInfo::default_instance_->InitAsDefaultInstance();
  CoreToManagerMessage::default_instance_->InitAsDefaultInstance();
  OptionsInfo::default_instance_->InitAsDefaultInstance();
  TypesFilter::default_instance_->InitAsDefaultInstance();
  GroupsFilter::default_instance_->InitAsDefaultInstance();
  QualityCondition::default_instance_->InitAsDefaultInstance();
  QualityFilter::default_instance_->InitAsDefaultInstance();
  CoordinatesCondition::default_instance_->InitAsDefaultInstance();
  CoordinatesFilter::default_instance_->InitAsDefaultInstance();
  ManagerToCoreMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_communication_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_communication_2eproto {
  StaticDescriptorInitializer_communication_2eproto() {
    protobuf_AddDesc_communication_2eproto();
  }
} static_descriptor_initializer_communication_2eproto_;
const ::google::protobuf::EnumDescriptor* ColoringType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColoringType_descriptor_;
}
bool ColoringType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VisualisationMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisualisationMode_descriptor_;
}
bool VisualisationMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ComparisonOperator_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComparisonOperator_descriptor_;
}
bool ComparisonOperator_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ElementInfo::kTotalFieldNumber;
const int ElementInfo::kVisibleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ElementInfo::ElementInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sm.ElementInfo)
}

void ElementInfo::InitAsDefaultInstance() {
}

ElementInfo::ElementInfo(const ElementInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sm.ElementInfo)
}

void ElementInfo::SharedCtor() {
  _cached_size_ = 0;
  total_ = 0;
  visible_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ElementInfo::~ElementInfo() {
  // @@protoc_insertion_point(destructor:sm.ElementInfo)
  SharedDtor();
}

void ElementInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ElementInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ElementInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ElementInfo_descriptor_;
}

const ElementInfo& ElementInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();
  return *default_instance_;
}

ElementInfo* ElementInfo::default_instance_ = NULL;

ElementInfo* ElementInfo::New(::google::protobuf::Arena* arena) const {
  ElementInfo* n = new ElementInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ElementInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sm.ElementInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ElementInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ElementInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(total_, visible_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ElementInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sm.ElementInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 total = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_visible;
        break;
      }

      // required int32 visible = 2;
      case 2: {
        if (tag == 16) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sm.ElementInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sm.ElementInfo)
  return false;
#undef DO_
}

void ElementInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sm.ElementInfo)
  // required int32 total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total(), output);
  }

  // required int32 visible = 2;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->visible(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sm.ElementInfo)
}

::google::protobuf::uint8* ElementInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sm.ElementInfo)
  // required int32 total = 1;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total(), target);
  }

  // required int32 visible = 2;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->visible(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sm.ElementInfo)
  return target;
}

int ElementInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sm.ElementInfo)
  int total_size = 0;

  if (has_total()) {
    // required int32 total = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total());
  }

  if (has_visible()) {
    // required int32 visible = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->visible());
  }

  return total_size;
}
int ElementInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sm.ElementInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 total = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total());

    // required int32 visible = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->visible());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ElementInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sm.ElementInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ElementInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ElementInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sm.ElementInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sm.ElementInfo)
    MergeFrom(*source);
  }
}

void ElementInfo::MergeFrom(const ElementInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sm.ElementInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ElementInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sm.ElementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElementInfo::CopyFrom(const ElementInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sm.ElementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ElementInfo::Swap(ElementInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ElementInfo::InternalSwap(ElementInfo* other) {
  std::swap(total_, other->total_);
  std::swap(visible_, other->visible_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ElementInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ElementInfo_descriptor_;
  metadata.reflection = ElementInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ElementInfo

// required int32 total = 1;
bool ElementInfo::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ElementInfo::set_has_total() {
  _has_bits_[0] |= 0x00000001u;
}
void ElementInfo::clear_has_total() {
  _has_bits_[0] &= ~0x00000001u;
}
void ElementInfo::clear_total() {
  total_ = 0;
  clear_has_total();
}
 ::google::protobuf::int32 ElementInfo::total() const {
  // @@protoc_insertion_point(field_get:sm.ElementInfo.total)
  return total_;
}
 void ElementInfo::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:sm.ElementInfo.total)
}

// required int32 visible = 2;
bool ElementInfo::has_visible() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ElementInfo::set_has_visible() {
  _has_bits_[0] |= 0x00000002u;
}
void ElementInfo::clear_has_visible() {
  _has_bits_[0] &= ~0x00000002u;
}
void ElementInfo::clear_visible() {
  visible_ = 0;
  clear_has_visible();
}
 ::google::protobuf::int32 ElementInfo::visible() const {
  // @@protoc_insertion_point(field_get:sm.ElementInfo.visible)
  return visible_;
}
 void ElementInfo::set_visible(::google::protobuf::int32 value) {
  set_has_visible();
  visible_ = value;
  // @@protoc_insertion_point(field_set:sm.ElementInfo.visible)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ElementsCount::kElementInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ElementsCount::ElementsCount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sm.ElementsCount)
}

void ElementsCount::InitAsDefaultInstance() {
}

ElementsCount::ElementsCount(const ElementsCount& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sm.ElementsCount)
}

void ElementsCount::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  elementinfos_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  elementinfos_.SetEntryDescriptor(
      &::sm::ElementsCount_ElementInfosEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ElementsCount::~ElementsCount() {
  // @@protoc_insertion_point(destructor:sm.ElementsCount)
  SharedDtor();
}

void ElementsCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ElementsCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ElementsCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ElementsCount_descriptor_;
}

const ElementsCount& ElementsCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();
  return *default_instance_;
}

ElementsCount* ElementsCount::default_instance_ = NULL;

ElementsCount* ElementsCount::New(::google::protobuf::Arena* arena) const {
  ElementsCount* n = new ElementsCount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ElementsCount::Clear() {
// @@protoc_insertion_point(message_clear_start:sm.ElementsCount)
  elementinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ElementsCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sm.ElementsCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .sm.ElementInfo> elementInfos = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_elementInfos:
          ElementsCount_ElementInfosEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::sm::ElementInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::sm::ElementInfo > > parser(&elementinfos_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sm.ElementsCount.ElementInfosEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_elementInfos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sm.ElementsCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sm.ElementsCount)
  return false;
#undef DO_
}

void ElementsCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sm.ElementsCount)
  // map<string, .sm.ElementInfo> elementInfos = 1;
  {
    ::google::protobuf::scoped_ptr<ElementsCount_ElementInfosEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::sm::ElementInfo >::const_iterator
        it = this->elementinfos().begin();
        it != this->elementinfos().end(); ++it) {
      entry.reset(elementinfos_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "sm.ElementsCount.ElementInfosEntry.key");
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sm.ElementsCount)
}

::google::protobuf::uint8* ElementsCount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sm.ElementsCount)
  // map<string, .sm.ElementInfo> elementInfos = 1;
  {
    ::google::protobuf::scoped_ptr<ElementsCount_ElementInfosEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::sm::ElementInfo >::const_iterator
        it = this->elementinfos().begin();
        it != this->elementinfos().end(); ++it) {
      entry.reset(elementinfos_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          InternalWriteMessageNoVirtualToArray(
              1, *entry, false, target);
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "sm.ElementsCount.ElementInfosEntry.key");
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sm.ElementsCount)
  return target;
}

int ElementsCount::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sm.ElementsCount)
  int total_size = 0;

  // map<string, .sm.ElementInfo> elementInfos = 1;
  total_size += 1 * this->elementinfos_size();
  {
    ::google::protobuf::scoped_ptr<ElementsCount_ElementInfosEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::sm::ElementInfo >::const_iterator
        it = this->elementinfos().begin();
        it != this->elementinfos().end(); ++it) {
      entry.reset(elementinfos_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ElementsCount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sm.ElementsCount)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ElementsCount* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ElementsCount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sm.ElementsCount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sm.ElementsCount)
    MergeFrom(*source);
  }
}

void ElementsCount::MergeFrom(const ElementsCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sm.ElementsCount)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  elementinfos_.MergeFrom(from.elementinfos_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ElementsCount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sm.ElementsCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElementsCount::CopyFrom(const ElementsCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sm.ElementsCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementsCount::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->elementinfos())) return false;
  return true;
}

void ElementsCount::Swap(ElementsCount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ElementsCount::InternalSwap(ElementsCount* other) {
  elementinfos_.Swap(&other->elementinfos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ElementsCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ElementsCount_descriptor_;
  metadata.reflection = ElementsCount_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ElementsCount

// map<string, .sm.ElementInfo> elementInfos = 1;
int ElementsCount::elementinfos_size() const {
  return elementinfos_.size();
}
void ElementsCount::clear_elementinfos() {
  elementinfos_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::sm::ElementInfo >&
ElementsCount::elementinfos() const {
  // @@protoc_insertion_point(field_map:sm.ElementsCount.elementInfos)
  return elementinfos_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::sm::ElementInfo >*
ElementsCount::mutable_elementinfos() {
  // @@protoc_insertion_point(field_mutable_map:sm.ElementsCount.elementInfos)
  return elementinfos_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundingBox::kFromXFieldNumber;
const int BoundingBox::kToXFieldNumber;
const int BoundingBox::kFromYFieldNumber;
const int BoundingBox::kToYFieldNumber;
const int BoundingBox::kFromZFieldNumber;
const int BoundingBox::kToZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundingBox::BoundingBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sm.BoundingBox)
}

void BoundingBox::InitAsDefaultInstance() {
}

BoundingBox::BoundingBox(const BoundingBox& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sm.BoundingBox)
}

void BoundingBox::SharedCtor() {
  _cached_size_ = 0;
  fromx_ = 0;
  tox_ = 0;
  fromy_ = 0;
  toy_ = 0;
  fromz_ = 0;
  toz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoundingBox::~BoundingBox() {
  // @@protoc_insertion_point(destructor:sm.BoundingBox)
  SharedDtor();
}

void BoundingBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoundingBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundingBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoundingBox_descriptor_;
}

const BoundingBox& BoundingBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();
  return *default_instance_;
}

BoundingBox* BoundingBox::default_instance_ = NULL;

BoundingBox* BoundingBox::New(::google::protobuf::Arena* arena) const {
  BoundingBox* n = new BoundingBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:sm.BoundingBox)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BoundingBox, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BoundingBox*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(fromx_, toz_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BoundingBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sm.BoundingBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double fromX = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fromx_)));
          set_has_fromx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_toX;
        break;
      }

      // required double toX = 2;
      case 2: {
        if (tag == 17) {
         parse_toX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tox_)));
          set_has_tox();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_fromY;
        break;
      }

      // required double fromY = 3;
      case 3: {
        if (tag == 25) {
         parse_fromY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fromy_)));
          set_has_fromy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_toY;
        break;
      }

      // required double toY = 4;
      case 4: {
        if (tag == 33) {
         parse_toY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &toy_)));
          set_has_toy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_fromZ;
        break;
      }

      // required double fromZ = 5;
      case 5: {
        if (tag == 41) {
         parse_fromZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fromz_)));
          set_has_fromz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_toZ;
        break;
      }

      // required double toZ = 6;
      case 6: {
        if (tag == 49) {
         parse_toZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &toz_)));
          set_has_toz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sm.BoundingBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sm.BoundingBox)
  return false;
#undef DO_
}

void BoundingBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sm.BoundingBox)
  // required double fromX = 1;
  if (has_fromx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->fromx(), output);
  }

  // required double toX = 2;
  if (has_tox()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->tox(), output);
  }

  // required double fromY = 3;
  if (has_fromy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->fromy(), output);
  }

  // required double toY = 4;
  if (has_toy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->toy(), output);
  }

  // required double fromZ = 5;
  if (has_fromz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->fromz(), output);
  }

  // required double toZ = 6;
  if (has_toz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->toz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sm.BoundingBox)
}

::google::protobuf::uint8* BoundingBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sm.BoundingBox)
  // required double fromX = 1;
  if (has_fromx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->fromx(), target);
  }

  // required double toX = 2;
  if (has_tox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->tox(), target);
  }

  // required double fromY = 3;
  if (has_fromy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->fromy(), target);
  }

  // required double toY = 4;
  if (has_toy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->toy(), target);
  }

  // required double fromZ = 5;
  if (has_fromz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->fromz(), target);
  }

  // required double toZ = 6;
  if (has_toz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->toz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sm.BoundingBox)
  return target;
}

int BoundingBox::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sm.BoundingBox)
  int total_size = 0;

  if (has_fromx()) {
    // required double fromX = 1;
    total_size += 1 + 8;
  }

  if (has_tox()) {
    // required double toX = 2;
    total_size += 1 + 8;
  }

  if (has_fromy()) {
    // required double fromY = 3;
    total_size += 1 + 8;
  }

  if (has_toy()) {
    // required double toY = 4;
    total_size += 1 + 8;
  }

  if (has_fromz()) {
    // required double fromZ = 5;
    total_size += 1 + 8;
  }

  if (has_toz()) {
    // required double toZ = 6;
    total_size += 1 + 8;
  }

  return total_size;
}
int BoundingBox::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sm.BoundingBox)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required double fromX = 1;
    total_size += 1 + 8;

    // required double toX = 2;
    total_size += 1 + 8;

    // required double fromY = 3;
    total_size += 1 + 8;

    // required double toY = 4;
    total_size += 1 + 8;

    // required double fromZ = 5;
    total_size += 1 + 8;

    // required double toZ = 6;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundingBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sm.BoundingBox)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BoundingBox* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BoundingBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sm.BoundingBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sm.BoundingBox)
    MergeFrom(*source);
  }
}

void BoundingBox::MergeFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sm.BoundingBox)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromx()) {
      set_fromx(from.fromx());
    }
    if (from.has_tox()) {
      set_tox(from.tox());
    }
    if (from.has_fromy()) {
      set_fromy(from.fromy());
    }
    if (from.has_toy()) {
      set_toy(from.toy());
    }
    if (from.has_fromz()) {
      set_fromz(from.fromz());
    }
    if (from.has_toz()) {
      set_toz(from.toz());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BoundingBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sm.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sm.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void BoundingBox::Swap(BoundingBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundingBox::InternalSwap(BoundingBox* other) {
  std::swap(fromx_, other->fromx_);
  std::swap(tox_, other->tox_);
  std::swap(fromy_, other->fromy_);
  std::swap(toy_, other->toy_);
  std::swap(fromz_, other->fromz_);
  std::swap(toz_, other->toz_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoundingBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoundingBox_descriptor_;
  metadata.reflection = BoundingBox_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoundingBox

// required double fromX = 1;
bool BoundingBox::has_fromx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BoundingBox::set_has_fromx() {
  _has_bits_[0] |= 0x00000001u;
}
void BoundingBox::clear_has_fromx() {
  _has_bits_[0] &= ~0x00000001u;
}
void BoundingBox::clear_fromx() {
  fromx_ = 0;
  clear_has_fromx();
}
 double BoundingBox::fromx() const {
  // @@protoc_insertion_point(field_get:sm.BoundingBox.fromX)
  return fromx_;
}
 void BoundingBox::set_fromx(double value) {
  set_has_fromx();
  fromx_ = value;
  // @@protoc_insertion_point(field_set:sm.BoundingBox.fromX)
}

// required double toX = 2;
bool BoundingBox::has_tox() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BoundingBox::set_has_tox() {
  _has_bits_[0] |= 0x00000002u;
}
void BoundingBox::clear_has_tox() {
  _has_bits_[0] &= ~0x00000002u;
}
void BoundingBox::clear_tox() {
  tox_ = 0;
  clear_has_tox();
}
 double BoundingBox::tox() const {
  // @@protoc_insertion_point(field_get:sm.BoundingBox.toX)
  return tox_;
}
 void BoundingBox::set_tox(double value) {
  set_has_tox();
  tox_ = value;
  // @@protoc_insertion_point(field_set:sm.BoundingBox.toX)
}

// required double fromY = 3;
bool BoundingBox::has_fromy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BoundingBox::set_has_fromy() {
  _has_bits_[0] |= 0x00000004u;
}
void BoundingBox::clear_has_fromy() {
  _has_bits_[0] &= ~0x00000004u;
}
void BoundingBox::clear_fromy() {
  fromy_ = 0;
  clear_has_fromy();
}
 double BoundingBox::fromy() const {
  // @@protoc_insertion_point(field_get:sm.BoundingBox.fromY)
  return fromy_;
}
 void BoundingBox::set_fromy(double value) {
  set_has_fromy();
  fromy_ = value;
  // @@protoc_insertion_point(field_set:sm.BoundingBox.fromY)
}

// required double toY = 4;
bool BoundingBox::has_toy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BoundingBox::set_has_toy() {
  _has_bits_[0] |= 0x00000008u;
}
void BoundingBox::clear_has_toy() {
  _has_bits_[0] &= ~0x00000008u;
}
void BoundingBox::clear_toy() {
  toy_ = 0;
  clear_has_toy();
}
 double BoundingBox::toy() const {
  // @@protoc_insertion_point(field_get:sm.BoundingBox.toY)
  return toy_;
}
 void BoundingBox::set_toy(double value) {
  set_has_toy();
  toy_ = value;
  // @@protoc_insertion_point(field_set:sm.BoundingBox.toY)
}

// required double fromZ = 5;
bool BoundingBox::has_fromz() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BoundingBox::set_has_fromz() {
  _has_bits_[0] |= 0x00000010u;
}
void BoundingBox::clear_has_fromz() {
  _has_bits_[0] &= ~0x00000010u;
}
void BoundingBox::clear_fromz() {
  fromz_ = 0;
  clear_has_fromz();
}
 double BoundingBox::fromz() const {
  // @@protoc_insertion_point(field_get:sm.BoundingBox.fromZ)
  return fromz_;
}
 void BoundingBox::set_fromz(double value) {
  set_has_fromz();
  fromz_ = value;
  // @@protoc_insertion_point(field_set:sm.BoundingBox.fromZ)
}

// required double toZ = 6;
bool BoundingBox::has_toz() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BoundingBox::set_has_toz() {
  _has_bits_[0] |= 0x00000020u;
}
void BoundingBox::clear_has_toz() {
  _has_bits_[0] &= ~0x00000020u;
}
void BoundingBox::clear_toz() {
  toz_ = 0;
  clear_has_toz();
}
 double BoundingBox::toz() const {
  // @@protoc_insertion_point(field_get:sm.BoundingBox.toZ)
  return toz_;
}
 void BoundingBox::set_toz(double value) {
  set_has_toz();
  toz_ = value;
  // @@protoc_insertion_point(field_set:sm.BoundingBox.toZ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Color::kRFieldNumber;
const int Color::kGFieldNumber;
const int Color::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Color::Color()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sm.Color)
}

void Color::InitAsDefaultInstance() {
}

Color::Color(const Color& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sm.Color)
}

void Color::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0;
  g_ = 0;
  b_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:sm.Color)
  SharedDtor();
}

void Color::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Color::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Color_descriptor_;
}

const Color& Color::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();
  return *default_instance_;
}

Color* Color::default_instance_ = NULL;

Color* Color::New(::google::protobuf::Arena* arena) const {
  Color* n = new Color;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:sm.Color)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Color, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Color*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(r_, b_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sm.Color)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 r = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_g;
        break;
      }

      // required int32 g = 2;
      case 2: {
        if (tag == 16) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_b;
        break;
      }

      // required int32 b = 3;
      case 3: {
        if (tag == 24) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sm.Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sm.Color)
  return false;
#undef DO_
}

void Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sm.Color)
  // required int32 r = 1;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->r(), output);
  }

  // required int32 g = 2;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->g(), output);
  }

  // required int32 b = 3;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->b(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sm.Color)
}

::google::protobuf::uint8* Color::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sm.Color)
  // required int32 r = 1;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->r(), target);
  }

  // required int32 g = 2;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->g(), target);
  }

  // required int32 b = 3;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->b(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sm.Color)
  return target;
}

int Color::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sm.Color)
  int total_size = 0;

  if (has_r()) {
    // required int32 r = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->r());
  }

  if (has_g()) {
    // required int32 g = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->g());
  }

  if (has_b()) {
    // required int32 b = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->b());
  }

  return total_size;
}
int Color::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sm.Color)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 r = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->r());

    // required int32 g = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->g());

    // required int32 b = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->b());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Color::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sm.Color)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Color* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Color>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sm.Color)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sm.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sm.Color)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Color::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sm.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sm.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Color::Swap(Color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Color::InternalSwap(Color* other) {
  std::swap(r_, other->r_);
  std::swap(g_, other->g_);
  std::swap(b_, other->b_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Color::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Color_descriptor_;
  metadata.reflection = Color_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Color

// required int32 r = 1;
bool Color::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Color::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
void Color::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
void Color::clear_r() {
  r_ = 0;
  clear_has_r();
}
 ::google::protobuf::int32 Color::r() const {
  // @@protoc_insertion_point(field_get:sm.Color.r)
  return r_;
}
 void Color::set_r(::google::protobuf::int32 value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:sm.Color.r)
}

// required int32 g = 2;
bool Color::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Color::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
void Color::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
void Color::clear_g() {
  g_ = 0;
  clear_has_g();
}
 ::google::protobuf::int32 Color::g() const {
  // @@protoc_insertion_point(field_get:sm.Color.g)
  return g_;
}
 void Color::set_g(::google::protobuf::int32 value) {
  set_has_g();
  g_ = value;
  // @@protoc_insertion_point(field_set:sm.Color.g)
}

// required int32 b = 3;
bool Color::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Color::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
void Color::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
void Color::clear_b() {
  b_ = 0;
  clear_has_b();
}
 ::google::protobuf::int32 Color::b() const {
  // @@protoc_insertion_point(field_get:sm.Color.b)
  return b_;
}
 void Color::set_b(::google::protobuf::int32 value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:sm.Color.b)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupsInfo::kAllGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupsInfo::GroupsInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sm.GroupsInfo)
}

void GroupsInfo::InitAsDefaultInstance() {
}

GroupsInfo::GroupsInfo(const GroupsInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sm.GroupsInfo)
}

void GroupsInfo::SharedCtor() {
  _cached_size_ = 0;
  allgroups_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  allgroups_.SetEntryDescriptor(
      &::sm::GroupsInfo_AllGroupsEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupsInfo::~GroupsInfo() {
  // @@protoc_insertion_point(destructor:sm.GroupsInfo)
  SharedDtor();
}

void GroupsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupsInfo_descriptor_;
}

const GroupsInfo& GroupsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();
  return *default_instance_;
}

GroupsInfo* GroupsInfo::default_instance_ = NULL;

GroupsInfo* GroupsInfo::New(::google::protobuf::Arena* arena) const {
  GroupsInfo* n = new GroupsInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sm.GroupsInfo)
  allgroups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GroupsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sm.GroupsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .sm.Color> allGroups = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_allGroups:
          GroupsInfo_AllGroupsEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::sm::Color,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::sm::Color > > parser(&allgroups_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_allGroups;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sm.GroupsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sm.GroupsInfo)
  return false;
#undef DO_
}

void GroupsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sm.GroupsInfo)
  // map<int32, .sm.Color> allGroups = 1;
  {
    ::google::protobuf::scoped_ptr<GroupsInfo_AllGroupsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::sm::Color >::const_iterator
        it = this->allgroups().begin();
        it != this->allgroups().end(); ++it) {
      entry.reset(allgroups_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sm.GroupsInfo)
}

::google::protobuf::uint8* GroupsInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sm.GroupsInfo)
  // map<int32, .sm.Color> allGroups = 1;
  {
    ::google::protobuf::scoped_ptr<GroupsInfo_AllGroupsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::sm::Color >::const_iterator
        it = this->allgroups().begin();
        it != this->allgroups().end(); ++it) {
      entry.reset(allgroups_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          InternalWriteMessageNoVirtualToArray(
              1, *entry, false, target);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sm.GroupsInfo)
  return target;
}

int GroupsInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sm.GroupsInfo)
  int total_size = 0;

  // map<int32, .sm.Color> allGroups = 1;
  total_size += 1 * this->allgroups_size();
  {
    ::google::protobuf::scoped_ptr<GroupsInfo_AllGroupsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::sm::Color >::const_iterator
        it = this->allgroups().begin();
        it != this->allgroups().end(); ++it) {
      entry.reset(allgroups_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupsInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sm.GroupsInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GroupsInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupsInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sm.GroupsInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sm.GroupsInfo)
    MergeFrom(*source);
  }
}

void GroupsInfo::MergeFrom(const GroupsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sm.GroupsInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  allgroups_.MergeFrom(from.allgroups_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GroupsInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sm.GroupsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupsInfo::CopyFrom(const GroupsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sm.GroupsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupsInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->allgroups())) return false;
  return true;
}

void GroupsInfo::Swap(GroupsInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupsInfo::InternalSwap(GroupsInfo* other) {
  allgroups_.Swap(&other->allgroups_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupsInfo_descriptor_;
  metadata.reflection = GroupsInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupsInfo

// map<int32, .sm.Color> allGroups = 1;
int GroupsInfo::allgroups_size() const {
  return allgroups_.size();
}
void GroupsInfo::clear_allgroups() {
  allgroups_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::sm::Color >&
GroupsInfo::allgroups() const {
  // @@protoc_insertion_point(field_map:sm.GroupsInfo.allGroups)
  return allgroups_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::sm::Color >*
GroupsInfo::mutable_allgroups() {
  // @@protoc_insertion_point(field_mutable_map:sm.GroupsInfo.allGroups)
  return allgroups_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatisticsInfo::kElementsCountFieldNumber;
const int StatisticsInfo::kBoundingBoxFieldNumber;
const int StatisticsInfo::kGroupsInfoFieldNumber;
const int StatisticsInfo::kTreeNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatisticsInfo::StatisticsInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sm.StatisticsInfo)
}

void StatisticsInfo::InitAsDefaultInstance() {
  elementscount_ = const_cast< ::sm::ElementsCount*>(&::sm::ElementsCount::default_instance());
  boundingbox_ = const_cast< ::sm::BoundingBox*>(&::sm::BoundingBox::default_instance());
  groupsinfo_ = const_cast< ::sm::GroupsInfo*>(&::sm::GroupsInfo::default_instance());
}

StatisticsInfo::StatisticsInfo(const StatisticsInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sm.StatisticsInfo)
}

void StatisticsInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  elementscount_ = NULL;
  boundingbox_ = NULL;
  groupsinfo_ = NULL;
  treename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatisticsInfo::~StatisticsInfo() {
  // @@protoc_insertion_point(destructor:sm.StatisticsInfo)
  SharedDtor();
}

void StatisticsInfo::SharedDtor() {
  treename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete elementscount_;
    delete boundingbox_;
    delete groupsinfo_;
  }
}

void StatisticsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatisticsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatisticsInfo_descriptor_;
}

const StatisticsInfo& StatisticsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();
  return *default_instance_;
}

StatisticsInfo* StatisticsInfo::default_instance_ = NULL;

StatisticsInfo* StatisticsInfo::New(::google::protobuf::Arena* arena) const {
  StatisticsInfo* n = new StatisticsInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatisticsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sm.StatisticsInfo)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_elementscount()) {
      if (elementscount_ != NULL) elementscount_->::sm::ElementsCount::Clear();
    }
    if (has_boundingbox()) {
      if (boundingbox_ != NULL) boundingbox_->::sm::BoundingBox::Clear();
    }
    if (has_groupsinfo()) {
      if (groupsinfo_ != NULL) groupsinfo_->::sm::GroupsInfo::Clear();
    }
    if (has_treename()) {
      treename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StatisticsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sm.StatisticsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sm.ElementsCount elementsCount = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elementscount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_boundingBox;
        break;
      }

      // required .sm.BoundingBox boundingBox = 2;
      case 2: {
        if (tag == 18) {
         parse_boundingBox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundingbox()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_groupsInfo;
        break;
      }

      // required .sm.GroupsInfo groupsInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_groupsInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groupsinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_treeName;
        break;
      }

      // required string treeName = 4;
      case 4: {
        if (tag == 34) {
         parse_treeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_treename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->treename().data(), this->treename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sm.StatisticsInfo.treeName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sm.StatisticsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sm.StatisticsInfo)
  return false;
#undef DO_
}

void StatisticsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sm.StatisticsInfo)
  // required .sm.ElementsCount elementsCount = 1;
  if (has_elementscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->elementscount_, output);
  }

  // required .sm.BoundingBox boundingBox = 2;
  if (has_boundingbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->boundingbox_, output);
  }

  // required .sm.GroupsInfo groupsInfo = 3;
  if (has_groupsinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->groupsinfo_, output);
  }

  // required string treeName = 4;
  if (has_treename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->treename().data(), this->treename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sm.StatisticsInfo.treeName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->treename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sm.StatisticsInfo)
}

::google::protobuf::uint8* StatisticsInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sm.StatisticsInfo)
  // required .sm.ElementsCount elementsCount = 1;
  if (has_elementscount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->elementscount_, false, target);
  }

  // required .sm.BoundingBox boundingBox = 2;
  if (has_boundingbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->boundingbox_, false, target);
  }

  // required .sm.GroupsInfo groupsInfo = 3;
  if (has_groupsinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->groupsinfo_, false, target);
  }

  // required string treeName = 4;
  if (has_treename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->treename().data(), this->treename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sm.StatisticsInfo.treeName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->treename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sm.StatisticsInfo)
  return target;
}

int StatisticsInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sm.StatisticsInfo)
  int total_size = 0;

  if (has_elementscount()) {
    // required .sm.ElementsCount elementsCount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->elementscount_);
  }

  if (has_boundingbox()) {
    // required .sm.BoundingBox boundingBox = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->boundingbox_);
  }

  if (has_groupsinfo()) {
    // required .sm.GroupsInfo groupsInfo = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->groupsinfo_);
  }

  if (has_treename()) {
    // required string treeName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->treename());
  }

  return total_size;
}
int StatisticsInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sm.StatisticsInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .sm.ElementsCount elementsCount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->elementscount_);

    // required .sm.BoundingBox boundingBox = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->boundingbox_);

    // required .sm.GroupsInfo groupsInfo = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->groupsinfo_);

    // required string treeName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->treename());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatisticsInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sm.StatisticsInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StatisticsInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StatisticsInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sm.StatisticsInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sm.StatisticsInfo)
    MergeFrom(*source);
  }
}

void StatisticsInfo::MergeFrom(const StatisticsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sm.StatisticsInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elementscount()) {
      mutable_elementscount()->::sm::ElementsCount::MergeFrom(from.elementscount());
    }
    if (from.has_boundingbox()) {
      mutable_boundingbox()->::sm::BoundingBox::MergeFrom(from.boundingbox());
    }
    if (from.has_groupsinfo()) {
      mutable_groupsinfo()->::sm::GroupsInfo::MergeFrom(from.groupsinfo());
    }
    if (from.has_treename()) {
      set_has_treename();
      treename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.treename_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StatisticsInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sm.StatisticsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticsInfo::CopyFrom(const StatisticsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sm.StatisticsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticsInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_elementscount()) {
    if (!this->elementscount_->IsInitialized()) return false;
  }
  if (has_boundingbox()) {
    if (!this->boundingbox_->IsInitialized()) return false;
  }
  if (has_groupsinfo()) {
    if (!this->groupsinfo_->IsInitialized()) return false;
  }
  return true;
}

void StatisticsInfo::Swap(StatisticsInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatisticsInfo::InternalSwap(StatisticsInfo* other) {
  std::swap(elementscount_, other->elementscount_);
  std::swap(boundingbox_, other->boundingbox_);
  std::swap(groupsinfo_, other->groupsinfo_);
  treename_.Swap(&other->treename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatisticsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatisticsInfo_descriptor_;
  metadata.reflection = StatisticsInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatisticsInfo

// required .sm.ElementsCount elementsCount = 1;
bool StatisticsInfo::has_elementscount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StatisticsInfo::set_has_elementscount() {
  _has_bits_[0] |= 0x00000001u;
}
void StatisticsInfo::clear_has_elementscount() {
  _has_bits_[0] &= ~0x00000001u;
}
void StatisticsInfo::clear_elementscount() {
  if (elementscount_ != NULL) elementscount_->::sm::ElementsCount::Clear();
  clear_has_elementscount();
}
const ::sm::ElementsCount& StatisticsInfo::elementscount() const {
  // @@protoc_insertion_point(field_get:sm.StatisticsInfo.elementsCount)
  return elementscount_ != NULL ? *elementscount_ : *default_instance_->elementscount_;
}
::sm::ElementsCount* StatisticsInfo::mutable_elementscount() {
  set_has_elementscount();
  if (elementscount_ == NULL) {
    elementscount_ = new ::sm::ElementsCount;
  }
  // @@protoc_insertion_point(field_mutable:sm.StatisticsInfo.elementsCount)
  return elementscount_;
}
::sm::ElementsCount* StatisticsInfo::release_elementscount() {
  // @@protoc_insertion_point(field_release:sm.StatisticsInfo.elementsCount)
  clear_has_elementscount();
  ::sm::ElementsCount* temp = elementscount_;
  elementscount_ = NULL;
  return temp;
}
void StatisticsInfo::set_allocated_elementscount(::sm::ElementsCount* elementscount) {
  delete elementscount_;
  elementscount_ = elementscount;
  if (elementscount) {
    set_has_elementscount();
  } else {
    clear_has_elementscount();
  }
  // @@protoc_insertion_point(field_set_allocated:sm.StatisticsInfo.elementsCount)
}

// required .sm.BoundingBox boundingBox = 2;
bool StatisticsInfo::has_boundingbox() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StatisticsInfo::set_has_boundingbox() {
  _has_bits_[0] |= 0x00000002u;
}
void StatisticsInfo::clear_has_boundingbox() {
  _has_bits_[0] &= ~0x00000002u;
}
void StatisticsInfo::clear_boundingbox() {
  if (boundingbox_ != NULL) boundingbox_->::sm::BoundingBox::Clear();
  clear_has_boundingbox();
}
const ::sm::BoundingBox& StatisticsInfo::boundingbox() const {
  // @@protoc_insertion_point(field_get:sm.StatisticsInfo.boundingBox)
  return boundingbox_ != NULL ? *boundingbox_ : *default_instance_->boundingbox_;
}
::sm::BoundingBox* StatisticsInfo::mutable_boundingbox() {
  set_has_boundingbox();
  if (boundingbox_ == NULL) {
    boundingbox_ = new ::sm::BoundingBox;
  }
  // @@protoc_insertion_point(field_mutable:sm.StatisticsInfo.boundingBox)
  return boundingbox_;
}
::sm::BoundingBox* StatisticsInfo::release_boundingbox() {
  // @@protoc_insertion_point(field_release:sm.StatisticsInfo.boundingBox)
  clear_has_boundingbox();
  ::sm::BoundingBox* temp = boundingbox_;
  boundingbox_ = NULL;
  return temp;
}
void StatisticsInfo::set_allocated_boundingbox(::sm::BoundingBox* boundingbox) {
  delete boundingbox_;
  boundingbox_ = boundingbox;
  if (boundingbox) {
    set_has_boundingbox();
  } else {
    clear_has_boundingbox();
  }
  // @@protoc_insertion_point(field_set_allocated:sm.StatisticsInfo.boundingBox)
}

// required .sm.GroupsInfo groupsInfo = 3;
bool StatisticsInfo::has_groupsinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StatisticsInfo::set_has_groupsinfo() {
  _has_bits_[0] |= 0x00000004u;
}
void StatisticsInfo::clear_has_groupsinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
void StatisticsInfo::clear_groupsinfo() {
  if (groupsinfo_ != NULL) groupsinfo_->::sm::GroupsInfo::Clear();
  clear_has_groupsinfo();
}
const ::sm::GroupsInfo& StatisticsInfo::groupsinfo() const {
  // @@protoc_insertion_point(field_get:sm.StatisticsInfo.groupsInfo)
  return groupsinfo_ != NULL ? *groupsinfo_ : *default_instance_->groupsinfo_;
}
::sm::GroupsInfo* StatisticsInfo::mutable_groupsinfo() {
  set_has_groupsinfo();
  if (groupsinfo_ == NULL) {
    groupsinfo_ = new ::sm::GroupsInfo;
  }
  // @@protoc_insertion_point(field_mutable:sm.StatisticsInfo.groupsInfo)
  return groupsinfo_;
}
::sm::GroupsInfo* StatisticsInfo::release_groupsinfo() {
  // @@protoc_insertion_point(field_release:sm.StatisticsInfo.groupsInfo)
  clear_has_groupsinfo();
  ::sm::GroupsInfo* temp = groupsinfo_;
  groupsinfo_ = NULL;
  return temp;
}
void StatisticsInfo::set_allocated_groupsinfo(::sm::GroupsInfo* groupsinfo) {
  delete groupsinfo_;
  groupsinfo_ = groupsinfo;
  if (groupsinfo) {
    set_has_groupsinfo();
  } else {
    clear_has_groupsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:sm.StatisticsInfo.groupsInfo)
}

// required string treeName = 4;
bool StatisticsInfo::has_treename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StatisticsInfo::set_has_treename() {
  _has_bits_[0] |= 0x00000008u;
}
void StatisticsInfo::clear_has_treename() {
  _has_bits_[0] &= ~0x00000008u;
}
void StatisticsInfo::clear_treename() {
  treename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_treename();
}
 const ::std::string& StatisticsInfo::treename() const {
  // @@protoc_insertion_point(field_get:sm.StatisticsInfo.treeName)
  return treename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatisticsInfo::set_treename(const ::std::string& value) {
  set_has_treename();
  treename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sm.StatisticsInfo.treeName)
}
 void StatisticsInfo::set_treename(const char* value) {
  set_has_treename();
  treename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sm.StatisticsInfo.treeName)
}
 void StatisticsInfo::set_treename(const char* value, size_t size) {
  set_has_treename();
  treename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sm.StatisticsInfo.treeName)
}
 ::std::string* StatisticsInfo::mutable_treename() {
  set_has_treename();
  // @@protoc_insertion_point(field_mutable:sm.StatisticsInfo.treeName)
  return treename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StatisticsInfo::release_treename() {
  // @@protoc_insertion_point(field_release:sm.StatisticsInfo.treeName)
  clear_has_treename();
  return treename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatisticsInfo::set_allocated_treename(::std::string* treename) {
  if (treename != NULL) {
    set_has_treename();
  } else {
    clear_has_treename();
  }
  treename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), treename);
  // @@protoc_insertion_point(field_set_allocated:sm.StatisticsInfo.treeName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CoreToManagerMessage_CTMMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoreToManagerMessage_CTMMessageType_descriptor_;
}
bool CoreToManagerMessage_CTMMessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CoreToManagerMessage_CTMMessageType CoreToManagerMessage::STATISTICS;
const CoreToManagerMessage_CTMMessageType CoreToManagerMessage::BREAKPOINT;
const CoreToManagerMessage_CTMMessageType CoreToManagerMessage::HARD_RESET;
const CoreToManagerMessage_CTMMessageType CoreToManagerMessage::CTMMessageType_MIN;
const CoreToManagerMessage_CTMMessageType CoreToManagerMessage::CTMMessageType_MAX;
const int CoreToManagerMessage::CTMMessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoreToManagerMessage::kMessageTypeFieldNumber;
const int CoreToManagerMessage::kStatisticsInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoreToManagerMessage::CoreToManagerMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sm.CoreToManagerMessage)
}

void CoreToManagerMessage::InitAsDefaultInstance() {
  statisticsinfo_ = const_cast< ::sm::StatisticsInfo*>(&::sm::StatisticsInfo::default_instance());
}

CoreToManagerMessage::CoreToManagerMessage(const CoreToManagerMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sm.CoreToManagerMessage)
}

void CoreToManagerMessage::SharedCtor() {
  _cached_size_ = 0;
  messagetype_ = 1;
  statisticsinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoreToManagerMessage::~CoreToManagerMessage() {
  // @@protoc_insertion_point(destructor:sm.CoreToManagerMessage)
  SharedDtor();
}

void CoreToManagerMessage::SharedDtor() {
  if (this != default_instance_) {
    delete statisticsinfo_;
  }
}

void CoreToManagerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoreToManagerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoreToManagerMessage_descriptor_;
}

const CoreToManagerMessage& CoreToManagerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();
  return *default_instance_;
}

CoreToManagerMessage* CoreToManagerMessage::default_instance_ = NULL;

CoreToManagerMessage* CoreToManagerMessage::New(::google::protobuf::Arena* arena) const {
  CoreToManagerMessage* n = new CoreToManagerMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CoreToManagerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sm.CoreToManagerMessage)
  if (_has_bits_[0 / 32] & 3u) {
    messagetype_ = 1;
    if (has_statisticsinfo()) {
      if (statisticsinfo_ != NULL) statisticsinfo_->::sm::StatisticsInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CoreToManagerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sm.CoreToManagerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sm.CoreToManagerMessage.CTMMessageType messageType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sm::CoreToManagerMessage_CTMMessageType_IsValid(value)) {
            set_messagetype(static_cast< ::sm::CoreToManagerMessage_CTMMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_statisticsInfo;
        break;
      }

      // optional .sm.StatisticsInfo statisticsInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_statisticsInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statisticsinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sm.CoreToManagerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sm.CoreToManagerMessage)
  return false;
#undef DO_
}

void CoreToManagerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sm.CoreToManagerMessage)
  // required .sm.CoreToManagerMessage.CTMMessageType messageType = 1;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->messagetype(), output);
  }

  // optional .sm.StatisticsInfo statisticsInfo = 2;
  if (has_statisticsinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->statisticsinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sm.CoreToManagerMessage)
}

::google::protobuf::uint8* CoreToManagerMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sm.CoreToManagerMessage)
  // required .sm.CoreToManagerMessage.CTMMessageType messageType = 1;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->messagetype(), target);
  }

  // optional .sm.StatisticsInfo statisticsInfo = 2;
  if (has_statisticsinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->statisticsinfo_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sm.CoreToManagerMessage)
  return target;
}

int CoreToManagerMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sm.CoreToManagerMessage)
  int total_size = 0;

  // required .sm.CoreToManagerMessage.CTMMessageType messageType = 1;
  if (has_messagetype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
  }
  // optional .sm.StatisticsInfo statisticsInfo = 2;
  if (has_statisticsinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->statisticsinfo_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoreToManagerMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sm.CoreToManagerMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CoreToManagerMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CoreToManagerMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sm.CoreToManagerMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sm.CoreToManagerMessage)
    MergeFrom(*source);
  }
}

void CoreToManagerMessage::MergeFrom(const CoreToManagerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sm.CoreToManagerMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_statisticsinfo()) {
      mutable_statisticsinfo()->::sm::StatisticsInfo::MergeFrom(from.statisticsinfo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CoreToManagerMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sm.CoreToManagerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoreToManagerMessage::CopyFrom(const CoreToManagerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sm.CoreToManagerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoreToManagerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_statisticsinfo()) {
    if (!this->statisticsinfo_->IsInitialized()) return false;
  }
  return true;
}

void CoreToManagerMessage::Swap(CoreToManagerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoreToManagerMessage::InternalSwap(CoreToManagerMessage* other) {
  std::swap(messagetype_, other->messagetype_);
  std::swap(statisticsinfo_, other->statisticsinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoreToManagerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoreToManagerMessage_descriptor_;
  metadata.reflection = CoreToManagerMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CoreToManagerMessage

// required .sm.CoreToManagerMessage.CTMMessageType messageType = 1;
bool CoreToManagerMessage::has_messagetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CoreToManagerMessage::set_has_messagetype() {
  _has_bits_[0] |= 0x00000001u;
}
void CoreToManagerMessage::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000001u;
}
void CoreToManagerMessage::clear_messagetype() {
  messagetype_ = 1;
  clear_has_messagetype();
}
 ::sm::CoreToManagerMessage_CTMMessageType CoreToManagerMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:sm.CoreToManagerMessage.messageType)
  return static_cast< ::sm::CoreToManagerMessage_CTMMessageType >(messagetype_);
}
 void CoreToManagerMessage::set_messagetype(::sm::CoreToManagerMessage_CTMMessageType value) {
  assert(::sm::CoreToManagerMessage_CTMMessageType_IsValid(value));
  set_has_messagetype();
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:sm.CoreToManagerMessage.messageType)
}

// optional .sm.StatisticsInfo statisticsInfo = 2;
bool CoreToManagerMessage::has_statisticsinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CoreToManagerMessage::set_has_statisticsinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void CoreToManagerMessage::clear_has_statisticsinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void CoreToManagerMessage::clear_statisticsinfo() {
  if (statisticsinfo_ != NULL) statisticsinfo_->::sm::StatisticsInfo::Clear();
  clear_has_statisticsinfo();
}
const ::sm::StatisticsInfo& CoreToManagerMessage::statisticsinfo() const {
  // @@protoc_insertion_point(field_get:sm.CoreToManagerMessage.statisticsInfo)
  return statisticsinfo_ != NULL ? *statisticsinfo_ : *default_instance_->statisticsinfo_;
}
::sm::StatisticsInfo* CoreToManagerMessage::mutable_statisticsinfo() {
  set_has_statisticsinfo();
  if (statisticsinfo_ == NULL) {
    statisticsinfo_ = new ::sm::StatisticsInfo;
  }
  // @@protoc_insertion_point(field_mutable:sm.CoreToManagerMessage.statisticsInfo)
  return statisticsinfo_;
}
::sm::StatisticsInfo* CoreToManagerMessage::release_statisticsinfo() {
  // @@protoc_insertion_point(field_release:sm.CoreToManagerMessage.statisticsInfo)
  clear_has_statisticsinfo();
  ::sm::StatisticsInfo* temp = statisticsinfo_;
  statisticsinfo_ = NULL;
  return temp;
}
void CoreToManagerMessage::set_allocated_statisticsinfo(::sm::StatisticsInfo* statisticsinfo) {
  delete statisticsinfo_;
  statisticsinfo_ = statisticsinfo;
  if (statisticsinfo) {
    set_has_statisticsinfo();
  } else {
    clear_has_statisticsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:sm.CoreToManagerMessage.statisticsInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionsInfo::kTransparentStructuresFieldNumber;
const int OptionsInfo::kDynamicRenderingFieldNumber;
const int OptionsInfo::kShowLabelsFieldNumber;
const int OptionsInfo::kMouseSensitivityFieldNumber;
const int OptionsInfo::kColoringTypeFieldNumber;
const int OptionsInfo::kVisualisationModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionsInfo::OptionsInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sm.OptionsInfo)
}

void OptionsInfo::InitAsDefaultInstance() {
}

OptionsInfo::OptionsInfo(const OptionsInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sm.OptionsInfo)
}

void OptionsInfo::SharedCtor() {
  _cached_size_ = 0;
  transparentstructures_ = false;
  dynamicrendering_ = false;
  showlabels_ = false;
  mousesensitivity_ = 0;
  coloringtype_ = 1;
  visualisationmode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OptionsInfo::~OptionsInfo() {
  // @@protoc_insertion_point(destructor:sm.OptionsInfo)
  SharedDtor();
}

void OptionsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OptionsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptionsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptionsInfo_descriptor_;
}

const OptionsInfo& OptionsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();
  return *default_instance_;
}

OptionsInfo* OptionsInfo::default_instance_ = NULL;

OptionsInfo* OptionsInfo::New(::google::protobuf::Arena* arena) const {
  OptionsInfo* n = new OptionsInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OptionsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sm.OptionsInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OptionsInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OptionsInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(transparentstructures_, showlabels_);
    mousesensitivity_ = 0;
    coloringtype_ = 1;
    visualisationmode_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OptionsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sm.OptionsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool transparentStructures = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transparentstructures_)));
          set_has_transparentstructures();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dynamicRendering;
        break;
      }

      // required bool dynamicRendering = 2;
      case 2: {
        if (tag == 16) {
         parse_dynamicRendering:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dynamicrendering_)));
          set_has_dynamicrendering();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_showLabels;
        break;
      }

      // required bool showLabels = 3;
      case 3: {
        if (tag == 24) {
         parse_showLabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showlabels_)));
          set_has_showlabels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_mouseSensitivity;
        break;
      }

      // required double mouseSensitivity = 4;
      case 4: {
        if (tag == 33) {
         parse_mouseSensitivity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mousesensitivity_)));
          set_has_mousesensitivity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_coloringType;
        break;
      }

      // required .sm.ColoringType coloringType = 5;
      case 5: {
        if (tag == 40) {
         parse_coloringType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sm::ColoringType_IsValid(value)) {
            set_coloringtype(static_cast< ::sm::ColoringType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_visualisationMode;
        break;
      }

      // required .sm.VisualisationMode visualisationMode = 6;
      case 6: {
        if (tag == 48) {
         parse_visualisationMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sm::VisualisationMode_IsValid(value)) {
            set_visualisationmode(static_cast< ::sm::VisualisationMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sm.OptionsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sm.OptionsInfo)
  return false;
#undef DO_
}

void OptionsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sm.OptionsInfo)
  // required bool transparentStructures = 1;
  if (has_transparentstructures()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->transparentstructures(), output);
  }

  // required bool dynamicRendering = 2;
  if (has_dynamicrendering()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->dynamicrendering(), output);
  }

  // required bool showLabels = 3;
  if (has_showlabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->showlabels(), output);
  }

  // required double mouseSensitivity = 4;
  if (has_mousesensitivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->mousesensitivity(), output);
  }

  // required .sm.ColoringType coloringType = 5;
  if (has_coloringtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->coloringtype(), output);
  }

  // required .sm.VisualisationMode visualisationMode = 6;
  if (has_visualisationmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->visualisationmode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sm.OptionsInfo)
}

::google::protobuf::uint8* OptionsInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sm.OptionsInfo)
  // required bool transparentStructures = 1;
  if (has_transparentstructures()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->transparentstructures(), target);
  }

  // required bool dynamicRendering = 2;
  if (has_dynamicrendering()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->dynamicrendering(), target);
  }

  // required bool showLabels = 3;
  if (has_showlabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->showlabels(), target);
  }

  // required double mouseSensitivity = 4;
  if (has_mousesensitivity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->mousesensitivity(), target);
  }

  // required .sm.ColoringType coloringType = 5;
  if (has_coloringtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->coloringtype(), target);
  }

  // required .sm.VisualisationMode visualisationMode = 6;
  if (has_visualisationmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->visualisationmode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sm.OptionsInfo)
  return target;
}

int OptionsInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sm.OptionsInfo)
  int total_size = 0;

  if (has_transparentstructures()) {
    // required bool transparentStructures = 1;
    total_size += 1 + 1;
  }

  if (has_dynamicrendering()) {
    // required bool dynamicRendering = 2;
    total_size += 1 + 1;
  }

  if (has_showlabels()) {
    // required bool showLabels = 3;
    total_size += 1 + 1;
  }

  if (has_mousesensitivity()) {
    // required double mouseSensitivity = 4;
    total_size += 1 + 8;
  }

  if (has_coloringtype()) {
    // required .sm.ColoringType coloringType = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->coloringtype());
  }

  if (has_visualisationmode()) {
    // required .sm.VisualisationMode visualisationMode = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->visualisationmode());
  }

  return total_size;
}
int OptionsInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sm.OptionsInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bool transparentStructures = 1;
    total_size += 1 + 1;

    // required bool dynamicRendering = 2;
    total_size += 1 + 1;

    // required bool showLabels = 3;
    total_size += 1 + 1;

    // required double mouseSensitivity = 4;
    total_size += 1 + 8;

    // required .sm.ColoringType coloringType = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->coloringtype());

    // required .sm.VisualisationMode visualisationMode = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->visualisationmode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptionsInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sm.OptionsInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OptionsInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionsInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sm.OptionsInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sm.OptionsInfo)
    MergeFrom(*source);
  }
}

void OptionsInfo::MergeFrom(const OptionsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sm.OptionsInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transparentstructures()) {
      set_transparentstructures(from.transparentstructures());
    }
    if (from.has_dynamicrendering()) {
      set_dynamicrendering(from.dynamicrendering());
    }
    if (from.has_showlabels()) {
      set_showlabels(from.showlabels());
    }
    if (from.has_mousesensitivity()) {
      set_mousesensitivity(from.mousesensitivity());
    }
    if (from.has_coloringtype()) {
      set_coloringtype(from.coloringtype());
    }
    if (from.has_visualisationmode()) {
      set_visualisationmode(from.visualisationmode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OptionsInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sm.OptionsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionsInfo::CopyFrom(const OptionsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sm.OptionsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionsInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void OptionsInfo::Swap(OptionsInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionsInfo::InternalSwap(OptionsInfo* other) {
  std::swap(transparentstructures_, other->transparentstructures_);
  std::swap(dynamicrendering_, other->dynamicrendering_);
  std::swap(showlabels_, other->showlabels_);
  std::swap(mousesensitivity_, other->mousesensitivity_);
  std::swap(coloringtype_, other->coloringtype_);
  std::swap(visualisationmode_, other->visualisationmode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OptionsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptionsInfo_descriptor_;
  metadata.reflection = OptionsInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OptionsInfo

// required bool transparentStructures = 1;
bool OptionsInfo::has_transparentstructures() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OptionsInfo::set_has_transparentstructures() {
  _has_bits_[0] |= 0x00000001u;
}
void OptionsInfo::clear_has_transparentstructures() {
  _has_bits_[0] &= ~0x00000001u;
}
void OptionsInfo::clear_transparentstructures() {
  transparentstructures_ = false;
  clear_has_transparentstructures();
}
 bool OptionsInfo::transparentstructures() const {
  // @@protoc_insertion_point(field_get:sm.OptionsInfo.transparentStructures)
  return transparentstructures_;
}
 void OptionsInfo::set_transparentstructures(bool value) {
  set_has_transparentstructures();
  transparentstructures_ = value;
  // @@protoc_insertion_point(field_set:sm.OptionsInfo.transparentStructures)
}

// required bool dynamicRendering = 2;
bool OptionsInfo::has_dynamicrendering() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OptionsInfo::set_has_dynamicrendering() {
  _has_bits_[0] |= 0x00000002u;
}
void OptionsInfo::clear_has_dynamicrendering() {
  _has_bits_[0] &= ~0x00000002u;
}
void OptionsInfo::clear_dynamicrendering() {
  dynamicrendering_ = false;
  clear_has_dynamicrendering();
}
 bool OptionsInfo::dynamicrendering() const {
  // @@protoc_insertion_point(field_get:sm.OptionsInfo.dynamicRendering)
  return dynamicrendering_;
}
 void OptionsInfo::set_dynamicrendering(bool value) {
  set_has_dynamicrendering();
  dynamicrendering_ = value;
  // @@protoc_insertion_point(field_set:sm.OptionsInfo.dynamicRendering)
}

// required bool showLabels = 3;
bool OptionsInfo::has_showlabels() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OptionsInfo::set_has_showlabels() {
  _has_bits_[0] |= 0x00000004u;
}
void OptionsInfo::clear_has_showlabels() {
  _has_bits_[0] &= ~0x00000004u;
}
void OptionsInfo::clear_showlabels() {
  showlabels_ = false;
  clear_has_showlabels();
}
 bool OptionsInfo::showlabels() const {
  // @@protoc_insertion_point(field_get:sm.OptionsInfo.showLabels)
  return showlabels_;
}
 void OptionsInfo::set_showlabels(bool value) {
  set_has_showlabels();
  showlabels_ = value;
  // @@protoc_insertion_point(field_set:sm.OptionsInfo.showLabels)
}

// required double mouseSensitivity = 4;
bool OptionsInfo::has_mousesensitivity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OptionsInfo::set_has_mousesensitivity() {
  _has_bits_[0] |= 0x00000008u;
}
void OptionsInfo::clear_has_mousesensitivity() {
  _has_bits_[0] &= ~0x00000008u;
}
void OptionsInfo::clear_mousesensitivity() {
  mousesensitivity_ = 0;
  clear_has_mousesensitivity();
}
 double OptionsInfo::mousesensitivity() const {
  // @@protoc_insertion_point(field_get:sm.OptionsInfo.mouseSensitivity)
  return mousesensitivity_;
}
 void OptionsInfo::set_mousesensitivity(double value) {
  set_has_mousesensitivity();
  mousesensitivity_ = value;
  // @@protoc_insertion_point(field_set:sm.OptionsInfo.mouseSensitivity)
}

// required .sm.ColoringType coloringType = 5;
bool OptionsInfo::has_coloringtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OptionsInfo::set_has_coloringtype() {
  _has_bits_[0] |= 0x00000010u;
}
void OptionsInfo::clear_has_coloringtype() {
  _has_bits_[0] &= ~0x00000010u;
}
void OptionsInfo::clear_coloringtype() {
  coloringtype_ = 1;
  clear_has_coloringtype();
}
 ::sm::ColoringType OptionsInfo::coloringtype() const {
  // @@protoc_insertion_point(field_get:sm.OptionsInfo.coloringType)
  return static_cast< ::sm::ColoringType >(coloringtype_);
}
 void OptionsInfo::set_coloringtype(::sm::ColoringType value) {
  assert(::sm::ColoringType_IsValid(value));
  set_has_coloringtype();
  coloringtype_ = value;
  // @@protoc_insertion_point(field_set:sm.OptionsInfo.coloringType)
}

// required .sm.VisualisationMode visualisationMode = 6;
bool OptionsInfo::has_visualisationmode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OptionsInfo::set_has_visualisationmode() {
  _has_bits_[0] |= 0x00000020u;
}
void OptionsInfo::clear_has_visualisationmode() {
  _has_bits_[0] &= ~0x00000020u;
}
void OptionsInfo::clear_visualisationmode() {
  visualisationmode_ = 1;
  clear_has_visualisationmode();
}
 ::sm::VisualisationMode OptionsInfo::visualisationmode() const {
  // @@protoc_insertion_point(field_get:sm.OptionsInfo.visualisationMode)
  return static_cast< ::sm::VisualisationMode >(visualisationmode_);
}
 void OptionsInfo::set_visualisationmode(::sm::VisualisationMode value) {
  assert(::sm::VisualisationMode_IsValid(value));
  set_has_visualisationmode();
  visualisationmode_ = value;
  // @@protoc_insertion_point(field_set:sm.OptionsInfo.visualisationMode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TypesFilter::kSelectedTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TypesFilter::TypesFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sm.TypesFilter)
}

void TypesFilter::InitAsDefaultInstance() {
}

TypesFilter::TypesFilter(const TypesFilter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sm.TypesFilter)
}

void TypesFilter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  selectedtypes_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  selectedtypes_.SetEntryDescriptor(
      &::sm::TypesFilter_SelectedTypesEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TypesFilter::~TypesFilter() {
  // @@protoc_insertion_point(destructor:sm.TypesFilter)
  SharedDtor();
}

void TypesFilter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TypesFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TypesFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TypesFilter_descriptor_;
}

const TypesFilter& TypesFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();
  return *default_instance_;
}

TypesFilter* TypesFilter::default_instance_ = NULL;

TypesFilter* TypesFilter::New(::google::protobuf::Arena* arena) const {
  TypesFilter* n = new TypesFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TypesFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:sm.TypesFilter)
  selectedtypes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TypesFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sm.TypesFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, bool> selectedTypes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_selectedTypes:
          TypesFilter_SelectedTypesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, bool,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::google::protobuf::Map< ::std::string, bool > > parser(&selectedtypes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sm.TypesFilter.SelectedTypesEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_selectedTypes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sm.TypesFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sm.TypesFilter)
  return false;
#undef DO_
}

void TypesFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sm.TypesFilter)
  // map<string, bool> selectedTypes = 1;
  {
    ::google::protobuf::scoped_ptr<TypesFilter_SelectedTypesEntry> entry;
    for (::google::protobuf::Map< ::std::string, bool >::const_iterator
        it = this->selectedtypes().begin();
        it != this->selectedtypes().end(); ++it) {
      entry.reset(selectedtypes_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "sm.TypesFilter.SelectedTypesEntry.key");
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sm.TypesFilter)
}

::google::protobuf::uint8* TypesFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sm.TypesFilter)
  // map<string, bool> selectedTypes = 1;
  {
    ::google::protobuf::scoped_ptr<TypesFilter_SelectedTypesEntry> entry;
    for (::google::protobuf::Map< ::std::string, bool >::const_iterator
        it = this->selectedtypes().begin();
        it != this->selectedtypes().end(); ++it) {
      entry.reset(selectedtypes_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          InternalWriteMessageNoVirtualToArray(
              1, *entry, false, target);
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "sm.TypesFilter.SelectedTypesEntry.key");
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sm.TypesFilter)
  return target;
}

int TypesFilter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sm.TypesFilter)
  int total_size = 0;

  // map<string, bool> selectedTypes = 1;
  total_size += 1 * this->selectedtypes_size();
  {
    ::google::protobuf::scoped_ptr<TypesFilter_SelectedTypesEntry> entry;
    for (::google::protobuf::Map< ::std::string, bool >::const_iterator
        it = this->selectedtypes().begin();
        it != this->selectedtypes().end(); ++it) {
      entry.reset(selectedtypes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypesFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sm.TypesFilter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TypesFilter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TypesFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sm.TypesFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sm.TypesFilter)
    MergeFrom(*source);
  }
}

void TypesFilter::MergeFrom(const TypesFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sm.TypesFilter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  selectedtypes_.MergeFrom(from.selectedtypes_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TypesFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sm.TypesFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypesFilter::CopyFrom(const TypesFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sm.TypesFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypesFilter::IsInitialized() const {

  return true;
}

void TypesFilter::Swap(TypesFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TypesFilter::InternalSwap(TypesFilter* other) {
  selectedtypes_.Swap(&other->selectedtypes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TypesFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TypesFilter_descriptor_;
  metadata.reflection = TypesFilter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TypesFilter

// map<string, bool> selectedTypes = 1;
int TypesFilter::selectedtypes_size() const {
  return selectedtypes_.size();
}
void TypesFilter::clear_selectedtypes() {
  selectedtypes_.Clear();
}
 const ::google::protobuf::Map< ::std::string, bool >&
TypesFilter::selectedtypes() const {
  // @@protoc_insertion_point(field_map:sm.TypesFilter.selectedTypes)
  return selectedtypes_.GetMap();
}
 ::google::protobuf::Map< ::std::string, bool >*
TypesFilter::mutable_selectedtypes() {
  // @@protoc_insertion_point(field_mutable_map:sm.TypesFilter.selectedTypes)
  return selectedtypes_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupsFilter::kSelectedGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupsFilter::GroupsFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sm.GroupsFilter)
}

void GroupsFilter::InitAsDefaultInstance() {
}

GroupsFilter::GroupsFilter(const GroupsFilter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sm.GroupsFilter)
}

void GroupsFilter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  selectedgroups_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  selectedgroups_.SetEntryDescriptor(
      &::sm::GroupsFilter_SelectedGroupsEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupsFilter::~GroupsFilter() {
  // @@protoc_insertion_point(destructor:sm.GroupsFilter)
  SharedDtor();
}

void GroupsFilter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupsFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupsFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupsFilter_descriptor_;
}

const GroupsFilter& GroupsFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();
  return *default_instance_;
}

GroupsFilter* GroupsFilter::default_instance_ = NULL;

GroupsFilter* GroupsFilter::New(::google::protobuf::Arena* arena) const {
  GroupsFilter* n = new GroupsFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupsFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:sm.GroupsFilter)
  selectedgroups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GroupsFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sm.GroupsFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, bool> selectedGroups = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_selectedGroups:
          GroupsFilter_SelectedGroupsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, bool,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::google::protobuf::Map< ::std::string, bool > > parser(&selectedgroups_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sm.GroupsFilter.SelectedGroupsEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_selectedGroups;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sm.GroupsFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sm.GroupsFilter)
  return false;
#undef DO_
}

void GroupsFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sm.GroupsFilter)
  // map<string, bool> selectedGroups = 1;
  {
    ::google::protobuf::scoped_ptr<GroupsFilter_SelectedGroupsEntry> entry;
    for (::google::protobuf::Map< ::std::string, bool >::const_iterator
        it = this->selectedgroups().begin();
        it != this->selectedgroups().end(); ++it) {
      entry.reset(selectedgroups_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "sm.GroupsFilter.SelectedGroupsEntry.key");
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sm.GroupsFilter)
}

::google::protobuf::uint8* GroupsFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sm.GroupsFilter)
  // map<string, bool> selectedGroups = 1;
  {
    ::google::protobuf::scoped_ptr<GroupsFilter_SelectedGroupsEntry> entry;
    for (::google::protobuf::Map< ::std::string, bool >::const_iterator
        it = this->selectedgroups().begin();
        it != this->selectedgroups().end(); ++it) {
      entry.reset(selectedgroups_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          InternalWriteMessageNoVirtualToArray(
              1, *entry, false, target);
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "sm.GroupsFilter.SelectedGroupsEntry.key");
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sm.GroupsFilter)
  return target;
}

int GroupsFilter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sm.GroupsFilter)
  int total_size = 0;

  // map<string, bool> selectedGroups = 1;
  total_size += 1 * this->selectedgroups_size();
  {
    ::google::protobuf::scoped_ptr<GroupsFilter_SelectedGroupsEntry> entry;
    for (::google::protobuf::Map< ::std::string, bool >::const_iterator
        it = this->selectedgroups().begin();
        it != this->selectedgroups().end(); ++it) {
      entry.reset(selectedgroups_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupsFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sm.GroupsFilter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GroupsFilter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupsFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sm.GroupsFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sm.GroupsFilter)
    MergeFrom(*source);
  }
}

void GroupsFilter::MergeFrom(const GroupsFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sm.GroupsFilter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  selectedgroups_.MergeFrom(from.selectedgroups_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GroupsFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sm.GroupsFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupsFilter::CopyFrom(const GroupsFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sm.GroupsFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupsFilter::IsInitialized() const {

  return true;
}

void GroupsFilter::Swap(GroupsFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupsFilter::InternalSwap(GroupsFilter* other) {
  selectedgroups_.Swap(&other->selectedgroups_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupsFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupsFilter_descriptor_;
  metadata.reflection = GroupsFilter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupsFilter

// map<string, bool> selectedGroups = 1;
int GroupsFilter::selectedgroups_size() const {
  return selectedgroups_.size();
}
void GroupsFilter::clear_selectedgroups() {
  selectedgroups_.Clear();
}
 const ::google::protobuf::Map< ::std::string, bool >&
GroupsFilter::selectedgroups() const {
  // @@protoc_insertion_point(field_map:sm.GroupsFilter.selectedGroups)
  return selectedgroups_.GetMap();
}
 ::google::protobuf::Map< ::std::string, bool >*
GroupsFilter::mutable_selectedgroups() {
  // @@protoc_insertion_point(field_mutable_map:sm.GroupsFilter.selectedGroups)
  return selectedgroups_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QualityCondition::kLeftValueFieldNumber;
const int QualityCondition::kLeftOperatorFieldNumber;
const int QualityCondition::kRightOperatorFieldNumber;
const int QualityCondition::kRightValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QualityCondition::QualityCondition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sm.QualityCondition)
}

void QualityCondition::InitAsDefaultInstance() {
}

QualityCondition::QualityCondition(const QualityCondition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sm.QualityCondition)
}

void QualityCondition::SharedCtor() {
  _cached_size_ = 0;
  leftvalue_ = 0;
  leftoperator_ = 1;
  rightoperator_ = 1;
  rightvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QualityCondition::~QualityCondition() {
  // @@protoc_insertion_point(destructor:sm.QualityCondition)
  SharedDtor();
}

void QualityCondition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QualityCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QualityCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QualityCondition_descriptor_;
}

const QualityCondition& QualityCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();
  return *default_instance_;
}

QualityCondition* QualityCondition::default_instance_ = NULL;

QualityCondition* QualityCondition::New(::google::protobuf::Arena* arena) const {
  QualityCondition* n = new QualityCondition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QualityCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:sm.QualityCondition)
  if (_has_bits_[0 / 32] & 15u) {
    leftvalue_ = 0;
    leftoperator_ = 1;
    rightoperator_ = 1;
    rightvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QualityCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sm.QualityCondition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double leftValue = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leftvalue_)));
          set_has_leftvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_leftOperator;
        break;
      }

      // optional .sm.ComparisonOperator leftOperator = 2;
      case 2: {
        if (tag == 16) {
         parse_leftOperator:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sm::ComparisonOperator_IsValid(value)) {
            set_leftoperator(static_cast< ::sm::ComparisonOperator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rightOperator;
        break;
      }

      // optional .sm.ComparisonOperator rightOperator = 3;
      case 3: {
        if (tag == 24) {
         parse_rightOperator:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sm::ComparisonOperator_IsValid(value)) {
            set_rightoperator(static_cast< ::sm::ComparisonOperator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_rightValue;
        break;
      }

      // optional double rightValue = 4;
      case 4: {
        if (tag == 33) {
         parse_rightValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightvalue_)));
          set_has_rightvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sm.QualityCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sm.QualityCondition)
  return false;
#undef DO_
}

void QualityCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sm.QualityCondition)
  // optional double leftValue = 1;
  if (has_leftvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->leftvalue(), output);
  }

  // optional .sm.ComparisonOperator leftOperator = 2;
  if (has_leftoperator()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->leftoperator(), output);
  }

  // optional .sm.ComparisonOperator rightOperator = 3;
  if (has_rightoperator()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->rightoperator(), output);
  }

  // optional double rightValue = 4;
  if (has_rightvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rightvalue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sm.QualityCondition)
}

::google::protobuf::uint8* QualityCondition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sm.QualityCondition)
  // optional double leftValue = 1;
  if (has_leftvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->leftvalue(), target);
  }

  // optional .sm.ComparisonOperator leftOperator = 2;
  if (has_leftoperator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->leftoperator(), target);
  }

  // optional .sm.ComparisonOperator rightOperator = 3;
  if (has_rightoperator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->rightoperator(), target);
  }

  // optional double rightValue = 4;
  if (has_rightvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rightvalue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sm.QualityCondition)
  return target;
}

int QualityCondition::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sm.QualityCondition)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional double leftValue = 1;
    if (has_leftvalue()) {
      total_size += 1 + 8;
    }

    // optional .sm.ComparisonOperator leftOperator = 2;
    if (has_leftoperator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leftoperator());
    }

    // optional .sm.ComparisonOperator rightOperator = 3;
    if (has_rightoperator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rightoperator());
    }

    // optional double rightValue = 4;
    if (has_rightvalue()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QualityCondition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sm.QualityCondition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QualityCondition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QualityCondition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sm.QualityCondition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sm.QualityCondition)
    MergeFrom(*source);
  }
}

void QualityCondition::MergeFrom(const QualityCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sm.QualityCondition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leftvalue()) {
      set_leftvalue(from.leftvalue());
    }
    if (from.has_leftoperator()) {
      set_leftoperator(from.leftoperator());
    }
    if (from.has_rightoperator()) {
      set_rightoperator(from.rightoperator());
    }
    if (from.has_rightvalue()) {
      set_rightvalue(from.rightvalue());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QualityCondition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sm.QualityCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QualityCondition::CopyFrom(const QualityCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sm.QualityCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QualityCondition::IsInitialized() const {

  return true;
}

void QualityCondition::Swap(QualityCondition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QualityCondition::InternalSwap(QualityCondition* other) {
  std::swap(leftvalue_, other->leftvalue_);
  std::swap(leftoperator_, other->leftoperator_);
  std::swap(rightoperator_, other->rightoperator_);
  std::swap(rightvalue_, other->rightvalue_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QualityCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QualityCondition_descriptor_;
  metadata.reflection = QualityCondition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QualityCondition

// optional double leftValue = 1;
bool QualityCondition::has_leftvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QualityCondition::set_has_leftvalue() {
  _has_bits_[0] |= 0x00000001u;
}
void QualityCondition::clear_has_leftvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
void QualityCondition::clear_leftvalue() {
  leftvalue_ = 0;
  clear_has_leftvalue();
}
 double QualityCondition::leftvalue() const {
  // @@protoc_insertion_point(field_get:sm.QualityCondition.leftValue)
  return leftvalue_;
}
 void QualityCondition::set_leftvalue(double value) {
  set_has_leftvalue();
  leftvalue_ = value;
  // @@protoc_insertion_point(field_set:sm.QualityCondition.leftValue)
}

// optional .sm.ComparisonOperator leftOperator = 2;
bool QualityCondition::has_leftoperator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QualityCondition::set_has_leftoperator() {
  _has_bits_[0] |= 0x00000002u;
}
void QualityCondition::clear_has_leftoperator() {
  _has_bits_[0] &= ~0x00000002u;
}
void QualityCondition::clear_leftoperator() {
  leftoperator_ = 1;
  clear_has_leftoperator();
}
 ::sm::ComparisonOperator QualityCondition::leftoperator() const {
  // @@protoc_insertion_point(field_get:sm.QualityCondition.leftOperator)
  return static_cast< ::sm::ComparisonOperator >(leftoperator_);
}
 void QualityCondition::set_leftoperator(::sm::ComparisonOperator value) {
  assert(::sm::ComparisonOperator_IsValid(value));
  set_has_leftoperator();
  leftoperator_ = value;
  // @@protoc_insertion_point(field_set:sm.QualityCondition.leftOperator)
}

// optional .sm.ComparisonOperator rightOperator = 3;
bool QualityCondition::has_rightoperator() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QualityCondition::set_has_rightoperator() {
  _has_bits_[0] |= 0x00000004u;
}
void QualityCondition::clear_has_rightoperator() {
  _has_bits_[0] &= ~0x00000004u;
}
void QualityCondition::clear_rightoperator() {
  rightoperator_ = 1;
  clear_has_rightoperator();
}
 ::sm::ComparisonOperator QualityCondition::rightoperator() const {
  // @@protoc_insertion_point(field_get:sm.QualityCondition.rightOperator)
  return static_cast< ::sm::ComparisonOperator >(rightoperator_);
}
 void QualityCondition::set_rightoperator(::sm::ComparisonOperator value) {
  assert(::sm::ComparisonOperator_IsValid(value));
  set_has_rightoperator();
  rightoperator_ = value;
  // @@protoc_insertion_point(field_set:sm.QualityCondition.rightOperator)
}

// optional double rightValue = 4;
bool QualityCondition::has_rightvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QualityCondition::set_has_rightvalue() {
  _has_bits_[0] |= 0x00000008u;
}
void QualityCondition::clear_has_rightvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
void QualityCondition::clear_rightvalue() {
  rightvalue_ = 0;
  clear_has_rightvalue();
}
 double QualityCondition::rightvalue() const {
  // @@protoc_insertion_point(field_get:sm.QualityCondition.rightValue)
  return rightvalue_;
}
 void QualityCondition::set_rightvalue(double value) {
  set_has_rightvalue();
  rightvalue_ = value;
  // @@protoc_insertion_point(field_set:sm.QualityCondition.rightValue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QualityFilter::kQualityConditionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QualityFilter::QualityFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sm.QualityFilter)
}

void QualityFilter::InitAsDefaultInstance() {
}

QualityFilter::QualityFilter(const QualityFilter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sm.QualityFilter)
}

void QualityFilter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QualityFilter::~QualityFilter() {
  // @@protoc_insertion_point(destructor:sm.QualityFilter)
  SharedDtor();
}

void QualityFilter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QualityFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QualityFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QualityFilter_descriptor_;
}

const QualityFilter& QualityFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();
  return *default_instance_;
}

QualityFilter* QualityFilter::default_instance_ = NULL;

QualityFilter* QualityFilter::New(::google::protobuf::Arena* arena) const {
  QualityFilter* n = new QualityFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QualityFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:sm.QualityFilter)
  qualitycondition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QualityFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sm.QualityFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sm.QualityCondition qualityCondition = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_qualityCondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_qualitycondition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_qualityCondition;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sm.QualityFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sm.QualityFilter)
  return false;
#undef DO_
}

void QualityFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sm.QualityFilter)
  // repeated .sm.QualityCondition qualityCondition = 1;
  for (unsigned int i = 0, n = this->qualitycondition_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->qualitycondition(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sm.QualityFilter)
}

::google::protobuf::uint8* QualityFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sm.QualityFilter)
  // repeated .sm.QualityCondition qualityCondition = 1;
  for (unsigned int i = 0, n = this->qualitycondition_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->qualitycondition(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sm.QualityFilter)
  return target;
}

int QualityFilter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sm.QualityFilter)
  int total_size = 0;

  // repeated .sm.QualityCondition qualityCondition = 1;
  total_size += 1 * this->qualitycondition_size();
  for (int i = 0; i < this->qualitycondition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->qualitycondition(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QualityFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sm.QualityFilter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QualityFilter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QualityFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sm.QualityFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sm.QualityFilter)
    MergeFrom(*source);
  }
}

void QualityFilter::MergeFrom(const QualityFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sm.QualityFilter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  qualitycondition_.MergeFrom(from.qualitycondition_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QualityFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sm.QualityFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QualityFilter::CopyFrom(const QualityFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sm.QualityFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QualityFilter::IsInitialized() const {

  return true;
}

void QualityFilter::Swap(QualityFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QualityFilter::InternalSwap(QualityFilter* other) {
  qualitycondition_.UnsafeArenaSwap(&other->qualitycondition_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QualityFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QualityFilter_descriptor_;
  metadata.reflection = QualityFilter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QualityFilter

// repeated .sm.QualityCondition qualityCondition = 1;
int QualityFilter::qualitycondition_size() const {
  return qualitycondition_.size();
}
void QualityFilter::clear_qualitycondition() {
  qualitycondition_.Clear();
}
const ::sm::QualityCondition& QualityFilter::qualitycondition(int index) const {
  // @@protoc_insertion_point(field_get:sm.QualityFilter.qualityCondition)
  return qualitycondition_.Get(index);
}
::sm::QualityCondition* QualityFilter::mutable_qualitycondition(int index) {
  // @@protoc_insertion_point(field_mutable:sm.QualityFilter.qualityCondition)
  return qualitycondition_.Mutable(index);
}
::sm::QualityCondition* QualityFilter::add_qualitycondition() {
  // @@protoc_insertion_point(field_add:sm.QualityFilter.qualityCondition)
  return qualitycondition_.Add();
}
::google::protobuf::RepeatedPtrField< ::sm::QualityCondition >*
QualityFilter::mutable_qualitycondition() {
  // @@protoc_insertion_point(field_mutable_list:sm.QualityFilter.qualityCondition)
  return &qualitycondition_;
}
const ::google::protobuf::RepeatedPtrField< ::sm::QualityCondition >&
QualityFilter::qualitycondition() const {
  // @@protoc_insertion_point(field_list:sm.QualityFilter.qualityCondition)
  return qualitycondition_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoordinatesCondition::kXValueFieldNumber;
const int CoordinatesCondition::kYValueFieldNumber;
const int CoordinatesCondition::kZValueFieldNumber;
const int CoordinatesCondition::kCoordinatesOperatorFieldNumber;
const int CoordinatesCondition::kConstantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoordinatesCondition::CoordinatesCondition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sm.CoordinatesCondition)
}

void CoordinatesCondition::InitAsDefaultInstance() {
}

CoordinatesCondition::CoordinatesCondition(const CoordinatesCondition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sm.CoordinatesCondition)
}

void CoordinatesCondition::SharedCtor() {
  _cached_size_ = 0;
  xvalue_ = 0;
  yvalue_ = 0;
  zvalue_ = 0;
  coordinatesoperator_ = 1;
  constant_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoordinatesCondition::~CoordinatesCondition() {
  // @@protoc_insertion_point(destructor:sm.CoordinatesCondition)
  SharedDtor();
}

void CoordinatesCondition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CoordinatesCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoordinatesCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoordinatesCondition_descriptor_;
}

const CoordinatesCondition& CoordinatesCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();
  return *default_instance_;
}

CoordinatesCondition* CoordinatesCondition::default_instance_ = NULL;

CoordinatesCondition* CoordinatesCondition::New(::google::protobuf::Arena* arena) const {
  CoordinatesCondition* n = new CoordinatesCondition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CoordinatesCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:sm.CoordinatesCondition)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CoordinatesCondition, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CoordinatesCondition*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(xvalue_, constant_);
    coordinatesoperator_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CoordinatesCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sm.CoordinatesCondition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double xValue = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xvalue_)));
          set_has_xvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_yValue;
        break;
      }

      // required double yValue = 2;
      case 2: {
        if (tag == 17) {
         parse_yValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yvalue_)));
          set_has_yvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_zValue;
        break;
      }

      // required double zValue = 3;
      case 3: {
        if (tag == 25) {
         parse_zValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zvalue_)));
          set_has_zvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_coordinatesOperator;
        break;
      }

      // required .sm.ComparisonOperator coordinatesOperator = 4;
      case 4: {
        if (tag == 32) {
         parse_coordinatesOperator:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sm::ComparisonOperator_IsValid(value)) {
            set_coordinatesoperator(static_cast< ::sm::ComparisonOperator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_constant;
        break;
      }

      // required double constant = 5;
      case 5: {
        if (tag == 41) {
         parse_constant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &constant_)));
          set_has_constant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sm.CoordinatesCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sm.CoordinatesCondition)
  return false;
#undef DO_
}

void CoordinatesCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sm.CoordinatesCondition)
  // required double xValue = 1;
  if (has_xvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->xvalue(), output);
  }

  // required double yValue = 2;
  if (has_yvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->yvalue(), output);
  }

  // required double zValue = 3;
  if (has_zvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->zvalue(), output);
  }

  // required .sm.ComparisonOperator coordinatesOperator = 4;
  if (has_coordinatesoperator()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->coordinatesoperator(), output);
  }

  // required double constant = 5;
  if (has_constant()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->constant(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sm.CoordinatesCondition)
}

::google::protobuf::uint8* CoordinatesCondition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sm.CoordinatesCondition)
  // required double xValue = 1;
  if (has_xvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->xvalue(), target);
  }

  // required double yValue = 2;
  if (has_yvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->yvalue(), target);
  }

  // required double zValue = 3;
  if (has_zvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->zvalue(), target);
  }

  // required .sm.ComparisonOperator coordinatesOperator = 4;
  if (has_coordinatesoperator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->coordinatesoperator(), target);
  }

  // required double constant = 5;
  if (has_constant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->constant(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sm.CoordinatesCondition)
  return target;
}

int CoordinatesCondition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sm.CoordinatesCondition)
  int total_size = 0;

  if (has_xvalue()) {
    // required double xValue = 1;
    total_size += 1 + 8;
  }

  if (has_yvalue()) {
    // required double yValue = 2;
    total_size += 1 + 8;
  }

  if (has_zvalue()) {
    // required double zValue = 3;
    total_size += 1 + 8;
  }

  if (has_coordinatesoperator()) {
    // required .sm.ComparisonOperator coordinatesOperator = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->coordinatesoperator());
  }

  if (has_constant()) {
    // required double constant = 5;
    total_size += 1 + 8;
  }

  return total_size;
}
int CoordinatesCondition::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sm.CoordinatesCondition)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required double xValue = 1;
    total_size += 1 + 8;

    // required double yValue = 2;
    total_size += 1 + 8;

    // required double zValue = 3;
    total_size += 1 + 8;

    // required .sm.ComparisonOperator coordinatesOperator = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->coordinatesoperator());

    // required double constant = 5;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoordinatesCondition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sm.CoordinatesCondition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CoordinatesCondition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CoordinatesCondition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sm.CoordinatesCondition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sm.CoordinatesCondition)
    MergeFrom(*source);
  }
}

void CoordinatesCondition::MergeFrom(const CoordinatesCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sm.CoordinatesCondition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xvalue()) {
      set_xvalue(from.xvalue());
    }
    if (from.has_yvalue()) {
      set_yvalue(from.yvalue());
    }
    if (from.has_zvalue()) {
      set_zvalue(from.zvalue());
    }
    if (from.has_coordinatesoperator()) {
      set_coordinatesoperator(from.coordinatesoperator());
    }
    if (from.has_constant()) {
      set_constant(from.constant());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CoordinatesCondition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sm.CoordinatesCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoordinatesCondition::CopyFrom(const CoordinatesCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sm.CoordinatesCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinatesCondition::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CoordinatesCondition::Swap(CoordinatesCondition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoordinatesCondition::InternalSwap(CoordinatesCondition* other) {
  std::swap(xvalue_, other->xvalue_);
  std::swap(yvalue_, other->yvalue_);
  std::swap(zvalue_, other->zvalue_);
  std::swap(coordinatesoperator_, other->coordinatesoperator_);
  std::swap(constant_, other->constant_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoordinatesCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoordinatesCondition_descriptor_;
  metadata.reflection = CoordinatesCondition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CoordinatesCondition

// required double xValue = 1;
bool CoordinatesCondition::has_xvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CoordinatesCondition::set_has_xvalue() {
  _has_bits_[0] |= 0x00000001u;
}
void CoordinatesCondition::clear_has_xvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
void CoordinatesCondition::clear_xvalue() {
  xvalue_ = 0;
  clear_has_xvalue();
}
 double CoordinatesCondition::xvalue() const {
  // @@protoc_insertion_point(field_get:sm.CoordinatesCondition.xValue)
  return xvalue_;
}
 void CoordinatesCondition::set_xvalue(double value) {
  set_has_xvalue();
  xvalue_ = value;
  // @@protoc_insertion_point(field_set:sm.CoordinatesCondition.xValue)
}

// required double yValue = 2;
bool CoordinatesCondition::has_yvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CoordinatesCondition::set_has_yvalue() {
  _has_bits_[0] |= 0x00000002u;
}
void CoordinatesCondition::clear_has_yvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
void CoordinatesCondition::clear_yvalue() {
  yvalue_ = 0;
  clear_has_yvalue();
}
 double CoordinatesCondition::yvalue() const {
  // @@protoc_insertion_point(field_get:sm.CoordinatesCondition.yValue)
  return yvalue_;
}
 void CoordinatesCondition::set_yvalue(double value) {
  set_has_yvalue();
  yvalue_ = value;
  // @@protoc_insertion_point(field_set:sm.CoordinatesCondition.yValue)
}

// required double zValue = 3;
bool CoordinatesCondition::has_zvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CoordinatesCondition::set_has_zvalue() {
  _has_bits_[0] |= 0x00000004u;
}
void CoordinatesCondition::clear_has_zvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
void CoordinatesCondition::clear_zvalue() {
  zvalue_ = 0;
  clear_has_zvalue();
}
 double CoordinatesCondition::zvalue() const {
  // @@protoc_insertion_point(field_get:sm.CoordinatesCondition.zValue)
  return zvalue_;
}
 void CoordinatesCondition::set_zvalue(double value) {
  set_has_zvalue();
  zvalue_ = value;
  // @@protoc_insertion_point(field_set:sm.CoordinatesCondition.zValue)
}

// required .sm.ComparisonOperator coordinatesOperator = 4;
bool CoordinatesCondition::has_coordinatesoperator() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CoordinatesCondition::set_has_coordinatesoperator() {
  _has_bits_[0] |= 0x00000008u;
}
void CoordinatesCondition::clear_has_coordinatesoperator() {
  _has_bits_[0] &= ~0x00000008u;
}
void CoordinatesCondition::clear_coordinatesoperator() {
  coordinatesoperator_ = 1;
  clear_has_coordinatesoperator();
}
 ::sm::ComparisonOperator CoordinatesCondition::coordinatesoperator() const {
  // @@protoc_insertion_point(field_get:sm.CoordinatesCondition.coordinatesOperator)
  return static_cast< ::sm::ComparisonOperator >(coordinatesoperator_);
}
 void CoordinatesCondition::set_coordinatesoperator(::sm::ComparisonOperator value) {
  assert(::sm::ComparisonOperator_IsValid(value));
  set_has_coordinatesoperator();
  coordinatesoperator_ = value;
  // @@protoc_insertion_point(field_set:sm.CoordinatesCondition.coordinatesOperator)
}

// required double constant = 5;
bool CoordinatesCondition::has_constant() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CoordinatesCondition::set_has_constant() {
  _has_bits_[0] |= 0x00000010u;
}
void CoordinatesCondition::clear_has_constant() {
  _has_bits_[0] &= ~0x00000010u;
}
void CoordinatesCondition::clear_constant() {
  constant_ = 0;
  clear_has_constant();
}
 double CoordinatesCondition::constant() const {
  // @@protoc_insertion_point(field_get:sm.CoordinatesCondition.constant)
  return constant_;
}
 void CoordinatesCondition::set_constant(double value) {
  set_has_constant();
  constant_ = value;
  // @@protoc_insertion_point(field_set:sm.CoordinatesCondition.constant)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CoordinatesFilter_Conjunction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoordinatesFilter_Conjunction_descriptor_;
}
bool CoordinatesFilter_Conjunction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CoordinatesFilter_Conjunction CoordinatesFilter::AND;
const CoordinatesFilter_Conjunction CoordinatesFilter::OR;
const CoordinatesFilter_Conjunction CoordinatesFilter::Conjunction_MIN;
const CoordinatesFilter_Conjunction CoordinatesFilter::Conjunction_MAX;
const int CoordinatesFilter::Conjunction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoordinatesFilter::kCoordinatesConditionFieldNumber;
const int CoordinatesFilter::kConjunctionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoordinatesFilter::CoordinatesFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sm.CoordinatesFilter)
}

void CoordinatesFilter::InitAsDefaultInstance() {
}

CoordinatesFilter::CoordinatesFilter(const CoordinatesFilter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sm.CoordinatesFilter)
}

void CoordinatesFilter::SharedCtor() {
  _cached_size_ = 0;
  conjunction_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoordinatesFilter::~CoordinatesFilter() {
  // @@protoc_insertion_point(destructor:sm.CoordinatesFilter)
  SharedDtor();
}

void CoordinatesFilter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CoordinatesFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoordinatesFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoordinatesFilter_descriptor_;
}

const CoordinatesFilter& CoordinatesFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();
  return *default_instance_;
}

CoordinatesFilter* CoordinatesFilter::default_instance_ = NULL;

CoordinatesFilter* CoordinatesFilter::New(::google::protobuf::Arena* arena) const {
  CoordinatesFilter* n = new CoordinatesFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CoordinatesFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:sm.CoordinatesFilter)
  conjunction_ = 1;
  coordinatescondition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CoordinatesFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sm.CoordinatesFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sm.CoordinatesCondition coordinatesCondition = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_coordinatesCondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_coordinatescondition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_coordinatesCondition;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_conjunction;
        break;
      }

      // optional .sm.CoordinatesFilter.Conjunction conjunction = 2;
      case 2: {
        if (tag == 16) {
         parse_conjunction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sm::CoordinatesFilter_Conjunction_IsValid(value)) {
            set_conjunction(static_cast< ::sm::CoordinatesFilter_Conjunction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sm.CoordinatesFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sm.CoordinatesFilter)
  return false;
#undef DO_
}

void CoordinatesFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sm.CoordinatesFilter)
  // repeated .sm.CoordinatesCondition coordinatesCondition = 1;
  for (unsigned int i = 0, n = this->coordinatescondition_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->coordinatescondition(i), output);
  }

  // optional .sm.CoordinatesFilter.Conjunction conjunction = 2;
  if (has_conjunction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->conjunction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sm.CoordinatesFilter)
}

::google::protobuf::uint8* CoordinatesFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sm.CoordinatesFilter)
  // repeated .sm.CoordinatesCondition coordinatesCondition = 1;
  for (unsigned int i = 0, n = this->coordinatescondition_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->coordinatescondition(i), false, target);
  }

  // optional .sm.CoordinatesFilter.Conjunction conjunction = 2;
  if (has_conjunction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->conjunction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sm.CoordinatesFilter)
  return target;
}

int CoordinatesFilter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sm.CoordinatesFilter)
  int total_size = 0;

  // optional .sm.CoordinatesFilter.Conjunction conjunction = 2;
  if (has_conjunction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->conjunction());
  }

  // repeated .sm.CoordinatesCondition coordinatesCondition = 1;
  total_size += 1 * this->coordinatescondition_size();
  for (int i = 0; i < this->coordinatescondition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coordinatescondition(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoordinatesFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sm.CoordinatesFilter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CoordinatesFilter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CoordinatesFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sm.CoordinatesFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sm.CoordinatesFilter)
    MergeFrom(*source);
  }
}

void CoordinatesFilter::MergeFrom(const CoordinatesFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sm.CoordinatesFilter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  coordinatescondition_.MergeFrom(from.coordinatescondition_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_conjunction()) {
      set_conjunction(from.conjunction());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CoordinatesFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sm.CoordinatesFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoordinatesFilter::CopyFrom(const CoordinatesFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sm.CoordinatesFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinatesFilter::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->coordinatescondition())) return false;
  return true;
}

void CoordinatesFilter::Swap(CoordinatesFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoordinatesFilter::InternalSwap(CoordinatesFilter* other) {
  coordinatescondition_.UnsafeArenaSwap(&other->coordinatescondition_);
  std::swap(conjunction_, other->conjunction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoordinatesFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoordinatesFilter_descriptor_;
  metadata.reflection = CoordinatesFilter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CoordinatesFilter

// repeated .sm.CoordinatesCondition coordinatesCondition = 1;
int CoordinatesFilter::coordinatescondition_size() const {
  return coordinatescondition_.size();
}
void CoordinatesFilter::clear_coordinatescondition() {
  coordinatescondition_.Clear();
}
const ::sm::CoordinatesCondition& CoordinatesFilter::coordinatescondition(int index) const {
  // @@protoc_insertion_point(field_get:sm.CoordinatesFilter.coordinatesCondition)
  return coordinatescondition_.Get(index);
}
::sm::CoordinatesCondition* CoordinatesFilter::mutable_coordinatescondition(int index) {
  // @@protoc_insertion_point(field_mutable:sm.CoordinatesFilter.coordinatesCondition)
  return coordinatescondition_.Mutable(index);
}
::sm::CoordinatesCondition* CoordinatesFilter::add_coordinatescondition() {
  // @@protoc_insertion_point(field_add:sm.CoordinatesFilter.coordinatesCondition)
  return coordinatescondition_.Add();
}
::google::protobuf::RepeatedPtrField< ::sm::CoordinatesCondition >*
CoordinatesFilter::mutable_coordinatescondition() {
  // @@protoc_insertion_point(field_mutable_list:sm.CoordinatesFilter.coordinatesCondition)
  return &coordinatescondition_;
}
const ::google::protobuf::RepeatedPtrField< ::sm::CoordinatesCondition >&
CoordinatesFilter::coordinatescondition() const {
  // @@protoc_insertion_point(field_list:sm.CoordinatesFilter.coordinatesCondition)
  return coordinatescondition_;
}

// optional .sm.CoordinatesFilter.Conjunction conjunction = 2;
bool CoordinatesFilter::has_conjunction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CoordinatesFilter::set_has_conjunction() {
  _has_bits_[0] |= 0x00000002u;
}
void CoordinatesFilter::clear_has_conjunction() {
  _has_bits_[0] &= ~0x00000002u;
}
void CoordinatesFilter::clear_conjunction() {
  conjunction_ = 1;
  clear_has_conjunction();
}
 ::sm::CoordinatesFilter_Conjunction CoordinatesFilter::conjunction() const {
  // @@protoc_insertion_point(field_get:sm.CoordinatesFilter.conjunction)
  return static_cast< ::sm::CoordinatesFilter_Conjunction >(conjunction_);
}
 void CoordinatesFilter::set_conjunction(::sm::CoordinatesFilter_Conjunction value) {
  assert(::sm::CoordinatesFilter_Conjunction_IsValid(value));
  set_has_conjunction();
  conjunction_ = value;
  // @@protoc_insertion_point(field_set:sm.CoordinatesFilter.conjunction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ManagerToCoreMessage_MTCMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManagerToCoreMessage_MTCMessageType_descriptor_;
}
bool ManagerToCoreMessage_MTCMessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ManagerToCoreMessage_MTCMessageType ManagerToCoreMessage::OPTIONS;
const ManagerToCoreMessage_MTCMessageType ManagerToCoreMessage::FILTERS;
const ManagerToCoreMessage_MTCMessageType ManagerToCoreMessage::CONTINUE;
const ManagerToCoreMessage_MTCMessageType ManagerToCoreMessage::ABORT;
const ManagerToCoreMessage_MTCMessageType ManagerToCoreMessage::HELLO;
const ManagerToCoreMessage_MTCMessageType ManagerToCoreMessage::SNAPSHOT;
const ManagerToCoreMessage_MTCMessageType ManagerToCoreMessage::CLEAN;
const ManagerToCoreMessage_MTCMessageType ManagerToCoreMessage::NEXT_TREE;
const ManagerToCoreMessage_MTCMessageType ManagerToCoreMessage::PREV_TREE;
const ManagerToCoreMessage_MTCMessageType ManagerToCoreMessage::IMPORT;
const ManagerToCoreMessage_MTCMessageType ManagerToCoreMessage::EXPORT;
const ManagerToCoreMessage_MTCMessageType ManagerToCoreMessage::MTCMessageType_MIN;
const ManagerToCoreMessage_MTCMessageType ManagerToCoreMessage::MTCMessageType_MAX;
const int ManagerToCoreMessage::MTCMessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManagerToCoreMessage::kMessageTypeFieldNumber;
const int ManagerToCoreMessage::kOptionsInfoFieldNumber;
const int ManagerToCoreMessage::kGroupsFilterFieldNumber;
const int ManagerToCoreMessage::kTypesFilterFieldNumber;
const int ManagerToCoreMessage::kQualityFilterFieldNumber;
const int ManagerToCoreMessage::kCoordinatesFilterFieldNumber;
const int ManagerToCoreMessage::kObjFilePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManagerToCoreMessage::ManagerToCoreMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sm.ManagerToCoreMessage)
}

void ManagerToCoreMessage::InitAsDefaultInstance() {
  optionsinfo_ = const_cast< ::sm::OptionsInfo*>(&::sm::OptionsInfo::default_instance());
  groupsfilter_ = const_cast< ::sm::GroupsFilter*>(&::sm::GroupsFilter::default_instance());
  typesfilter_ = const_cast< ::sm::TypesFilter*>(&::sm::TypesFilter::default_instance());
  qualityfilter_ = const_cast< ::sm::QualityFilter*>(&::sm::QualityFilter::default_instance());
  coordinatesfilter_ = const_cast< ::sm::CoordinatesFilter*>(&::sm::CoordinatesFilter::default_instance());
}

ManagerToCoreMessage::ManagerToCoreMessage(const ManagerToCoreMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sm.ManagerToCoreMessage)
}

void ManagerToCoreMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  messagetype_ = 1;
  optionsinfo_ = NULL;
  groupsfilter_ = NULL;
  typesfilter_ = NULL;
  qualityfilter_ = NULL;
  coordinatesfilter_ = NULL;
  objfilepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManagerToCoreMessage::~ManagerToCoreMessage() {
  // @@protoc_insertion_point(destructor:sm.ManagerToCoreMessage)
  SharedDtor();
}

void ManagerToCoreMessage::SharedDtor() {
  objfilepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete optionsinfo_;
    delete groupsfilter_;
    delete typesfilter_;
    delete qualityfilter_;
    delete coordinatesfilter_;
  }
}

void ManagerToCoreMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManagerToCoreMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManagerToCoreMessage_descriptor_;
}

const ManagerToCoreMessage& ManagerToCoreMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();
  return *default_instance_;
}

ManagerToCoreMessage* ManagerToCoreMessage::default_instance_ = NULL;

ManagerToCoreMessage* ManagerToCoreMessage::New(::google::protobuf::Arena* arena) const {
  ManagerToCoreMessage* n = new ManagerToCoreMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManagerToCoreMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sm.ManagerToCoreMessage)
  if (_has_bits_[0 / 32] & 127u) {
    messagetype_ = 1;
    if (has_optionsinfo()) {
      if (optionsinfo_ != NULL) optionsinfo_->::sm::OptionsInfo::Clear();
    }
    if (has_groupsfilter()) {
      if (groupsfilter_ != NULL) groupsfilter_->::sm::GroupsFilter::Clear();
    }
    if (has_typesfilter()) {
      if (typesfilter_ != NULL) typesfilter_->::sm::TypesFilter::Clear();
    }
    if (has_qualityfilter()) {
      if (qualityfilter_ != NULL) qualityfilter_->::sm::QualityFilter::Clear();
    }
    if (has_coordinatesfilter()) {
      if (coordinatesfilter_ != NULL) coordinatesfilter_->::sm::CoordinatesFilter::Clear();
    }
    if (has_objfilepath()) {
      objfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ManagerToCoreMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sm.ManagerToCoreMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sm.ManagerToCoreMessage.MTCMessageType messageType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sm::ManagerToCoreMessage_MTCMessageType_IsValid(value)) {
            set_messagetype(static_cast< ::sm::ManagerToCoreMessage_MTCMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_optionsInfo;
        break;
      }

      // optional .sm.OptionsInfo optionsInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_optionsInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optionsinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_groupsFilter;
        break;
      }

      // optional .sm.GroupsFilter groupsFilter = 3;
      case 3: {
        if (tag == 26) {
         parse_groupsFilter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groupsfilter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_typesFilter;
        break;
      }

      // optional .sm.TypesFilter typesFilter = 4;
      case 4: {
        if (tag == 34) {
         parse_typesFilter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_typesfilter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_qualityFilter;
        break;
      }

      // optional .sm.QualityFilter qualityFilter = 5;
      case 5: {
        if (tag == 42) {
         parse_qualityFilter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qualityfilter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_coordinatesFilter;
        break;
      }

      // optional .sm.CoordinatesFilter coordinatesFilter = 6;
      case 6: {
        if (tag == 50) {
         parse_coordinatesFilter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coordinatesfilter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_objFilePath;
        break;
      }

      // optional string objFilePath = 7;
      case 7: {
        if (tag == 58) {
         parse_objFilePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objfilepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->objfilepath().data(), this->objfilepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sm.ManagerToCoreMessage.objFilePath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sm.ManagerToCoreMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sm.ManagerToCoreMessage)
  return false;
#undef DO_
}

void ManagerToCoreMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sm.ManagerToCoreMessage)
  // required .sm.ManagerToCoreMessage.MTCMessageType messageType = 1;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->messagetype(), output);
  }

  // optional .sm.OptionsInfo optionsInfo = 2;
  if (has_optionsinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->optionsinfo_, output);
  }

  // optional .sm.GroupsFilter groupsFilter = 3;
  if (has_groupsfilter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->groupsfilter_, output);
  }

  // optional .sm.TypesFilter typesFilter = 4;
  if (has_typesfilter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->typesfilter_, output);
  }

  // optional .sm.QualityFilter qualityFilter = 5;
  if (has_qualityfilter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->qualityfilter_, output);
  }

  // optional .sm.CoordinatesFilter coordinatesFilter = 6;
  if (has_coordinatesfilter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->coordinatesfilter_, output);
  }

  // optional string objFilePath = 7;
  if (has_objfilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->objfilepath().data(), this->objfilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sm.ManagerToCoreMessage.objFilePath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->objfilepath(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sm.ManagerToCoreMessage)
}

::google::protobuf::uint8* ManagerToCoreMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sm.ManagerToCoreMessage)
  // required .sm.ManagerToCoreMessage.MTCMessageType messageType = 1;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->messagetype(), target);
  }

  // optional .sm.OptionsInfo optionsInfo = 2;
  if (has_optionsinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->optionsinfo_, false, target);
  }

  // optional .sm.GroupsFilter groupsFilter = 3;
  if (has_groupsfilter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->groupsfilter_, false, target);
  }

  // optional .sm.TypesFilter typesFilter = 4;
  if (has_typesfilter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->typesfilter_, false, target);
  }

  // optional .sm.QualityFilter qualityFilter = 5;
  if (has_qualityfilter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->qualityfilter_, false, target);
  }

  // optional .sm.CoordinatesFilter coordinatesFilter = 6;
  if (has_coordinatesfilter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->coordinatesfilter_, false, target);
  }

  // optional string objFilePath = 7;
  if (has_objfilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->objfilepath().data(), this->objfilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sm.ManagerToCoreMessage.objFilePath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->objfilepath(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sm.ManagerToCoreMessage)
  return target;
}

int ManagerToCoreMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sm.ManagerToCoreMessage)
  int total_size = 0;

  // required .sm.ManagerToCoreMessage.MTCMessageType messageType = 1;
  if (has_messagetype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
  }
  if (_has_bits_[1 / 32] & 126u) {
    // optional .sm.OptionsInfo optionsInfo = 2;
    if (has_optionsinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->optionsinfo_);
    }

    // optional .sm.GroupsFilter groupsFilter = 3;
    if (has_groupsfilter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->groupsfilter_);
    }

    // optional .sm.TypesFilter typesFilter = 4;
    if (has_typesfilter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->typesfilter_);
    }

    // optional .sm.QualityFilter qualityFilter = 5;
    if (has_qualityfilter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->qualityfilter_);
    }

    // optional .sm.CoordinatesFilter coordinatesFilter = 6;
    if (has_coordinatesfilter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->coordinatesfilter_);
    }

    // optional string objFilePath = 7;
    if (has_objfilepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objfilepath());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManagerToCoreMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sm.ManagerToCoreMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ManagerToCoreMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ManagerToCoreMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sm.ManagerToCoreMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sm.ManagerToCoreMessage)
    MergeFrom(*source);
  }
}

void ManagerToCoreMessage::MergeFrom(const ManagerToCoreMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sm.ManagerToCoreMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_optionsinfo()) {
      mutable_optionsinfo()->::sm::OptionsInfo::MergeFrom(from.optionsinfo());
    }
    if (from.has_groupsfilter()) {
      mutable_groupsfilter()->::sm::GroupsFilter::MergeFrom(from.groupsfilter());
    }
    if (from.has_typesfilter()) {
      mutable_typesfilter()->::sm::TypesFilter::MergeFrom(from.typesfilter());
    }
    if (from.has_qualityfilter()) {
      mutable_qualityfilter()->::sm::QualityFilter::MergeFrom(from.qualityfilter());
    }
    if (from.has_coordinatesfilter()) {
      mutable_coordinatesfilter()->::sm::CoordinatesFilter::MergeFrom(from.coordinatesfilter());
    }
    if (from.has_objfilepath()) {
      set_has_objfilepath();
      objfilepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objfilepath_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ManagerToCoreMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sm.ManagerToCoreMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManagerToCoreMessage::CopyFrom(const ManagerToCoreMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sm.ManagerToCoreMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManagerToCoreMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_optionsinfo()) {
    if (!this->optionsinfo_->IsInitialized()) return false;
  }
  if (has_coordinatesfilter()) {
    if (!this->coordinatesfilter_->IsInitialized()) return false;
  }
  return true;
}

void ManagerToCoreMessage::Swap(ManagerToCoreMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManagerToCoreMessage::InternalSwap(ManagerToCoreMessage* other) {
  std::swap(messagetype_, other->messagetype_);
  std::swap(optionsinfo_, other->optionsinfo_);
  std::swap(groupsfilter_, other->groupsfilter_);
  std::swap(typesfilter_, other->typesfilter_);
  std::swap(qualityfilter_, other->qualityfilter_);
  std::swap(coordinatesfilter_, other->coordinatesfilter_);
  objfilepath_.Swap(&other->objfilepath_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManagerToCoreMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManagerToCoreMessage_descriptor_;
  metadata.reflection = ManagerToCoreMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManagerToCoreMessage

// required .sm.ManagerToCoreMessage.MTCMessageType messageType = 1;
bool ManagerToCoreMessage::has_messagetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManagerToCoreMessage::set_has_messagetype() {
  _has_bits_[0] |= 0x00000001u;
}
void ManagerToCoreMessage::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManagerToCoreMessage::clear_messagetype() {
  messagetype_ = 1;
  clear_has_messagetype();
}
 ::sm::ManagerToCoreMessage_MTCMessageType ManagerToCoreMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:sm.ManagerToCoreMessage.messageType)
  return static_cast< ::sm::ManagerToCoreMessage_MTCMessageType >(messagetype_);
}
 void ManagerToCoreMessage::set_messagetype(::sm::ManagerToCoreMessage_MTCMessageType value) {
  assert(::sm::ManagerToCoreMessage_MTCMessageType_IsValid(value));
  set_has_messagetype();
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:sm.ManagerToCoreMessage.messageType)
}

// optional .sm.OptionsInfo optionsInfo = 2;
bool ManagerToCoreMessage::has_optionsinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManagerToCoreMessage::set_has_optionsinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void ManagerToCoreMessage::clear_has_optionsinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManagerToCoreMessage::clear_optionsinfo() {
  if (optionsinfo_ != NULL) optionsinfo_->::sm::OptionsInfo::Clear();
  clear_has_optionsinfo();
}
const ::sm::OptionsInfo& ManagerToCoreMessage::optionsinfo() const {
  // @@protoc_insertion_point(field_get:sm.ManagerToCoreMessage.optionsInfo)
  return optionsinfo_ != NULL ? *optionsinfo_ : *default_instance_->optionsinfo_;
}
::sm::OptionsInfo* ManagerToCoreMessage::mutable_optionsinfo() {
  set_has_optionsinfo();
  if (optionsinfo_ == NULL) {
    optionsinfo_ = new ::sm::OptionsInfo;
  }
  // @@protoc_insertion_point(field_mutable:sm.ManagerToCoreMessage.optionsInfo)
  return optionsinfo_;
}
::sm::OptionsInfo* ManagerToCoreMessage::release_optionsinfo() {
  // @@protoc_insertion_point(field_release:sm.ManagerToCoreMessage.optionsInfo)
  clear_has_optionsinfo();
  ::sm::OptionsInfo* temp = optionsinfo_;
  optionsinfo_ = NULL;
  return temp;
}
void ManagerToCoreMessage::set_allocated_optionsinfo(::sm::OptionsInfo* optionsinfo) {
  delete optionsinfo_;
  optionsinfo_ = optionsinfo;
  if (optionsinfo) {
    set_has_optionsinfo();
  } else {
    clear_has_optionsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:sm.ManagerToCoreMessage.optionsInfo)
}

// optional .sm.GroupsFilter groupsFilter = 3;
bool ManagerToCoreMessage::has_groupsfilter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ManagerToCoreMessage::set_has_groupsfilter() {
  _has_bits_[0] |= 0x00000004u;
}
void ManagerToCoreMessage::clear_has_groupsfilter() {
  _has_bits_[0] &= ~0x00000004u;
}
void ManagerToCoreMessage::clear_groupsfilter() {
  if (groupsfilter_ != NULL) groupsfilter_->::sm::GroupsFilter::Clear();
  clear_has_groupsfilter();
}
const ::sm::GroupsFilter& ManagerToCoreMessage::groupsfilter() const {
  // @@protoc_insertion_point(field_get:sm.ManagerToCoreMessage.groupsFilter)
  return groupsfilter_ != NULL ? *groupsfilter_ : *default_instance_->groupsfilter_;
}
::sm::GroupsFilter* ManagerToCoreMessage::mutable_groupsfilter() {
  set_has_groupsfilter();
  if (groupsfilter_ == NULL) {
    groupsfilter_ = new ::sm::GroupsFilter;
  }
  // @@protoc_insertion_point(field_mutable:sm.ManagerToCoreMessage.groupsFilter)
  return groupsfilter_;
}
::sm::GroupsFilter* ManagerToCoreMessage::release_groupsfilter() {
  // @@protoc_insertion_point(field_release:sm.ManagerToCoreMessage.groupsFilter)
  clear_has_groupsfilter();
  ::sm::GroupsFilter* temp = groupsfilter_;
  groupsfilter_ = NULL;
  return temp;
}
void ManagerToCoreMessage::set_allocated_groupsfilter(::sm::GroupsFilter* groupsfilter) {
  delete groupsfilter_;
  groupsfilter_ = groupsfilter;
  if (groupsfilter) {
    set_has_groupsfilter();
  } else {
    clear_has_groupsfilter();
  }
  // @@protoc_insertion_point(field_set_allocated:sm.ManagerToCoreMessage.groupsFilter)
}

// optional .sm.TypesFilter typesFilter = 4;
bool ManagerToCoreMessage::has_typesfilter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ManagerToCoreMessage::set_has_typesfilter() {
  _has_bits_[0] |= 0x00000008u;
}
void ManagerToCoreMessage::clear_has_typesfilter() {
  _has_bits_[0] &= ~0x00000008u;
}
void ManagerToCoreMessage::clear_typesfilter() {
  if (typesfilter_ != NULL) typesfilter_->::sm::TypesFilter::Clear();
  clear_has_typesfilter();
}
const ::sm::TypesFilter& ManagerToCoreMessage::typesfilter() const {
  // @@protoc_insertion_point(field_get:sm.ManagerToCoreMessage.typesFilter)
  return typesfilter_ != NULL ? *typesfilter_ : *default_instance_->typesfilter_;
}
::sm::TypesFilter* ManagerToCoreMessage::mutable_typesfilter() {
  set_has_typesfilter();
  if (typesfilter_ == NULL) {
    typesfilter_ = new ::sm::TypesFilter;
  }
  // @@protoc_insertion_point(field_mutable:sm.ManagerToCoreMessage.typesFilter)
  return typesfilter_;
}
::sm::TypesFilter* ManagerToCoreMessage::release_typesfilter() {
  // @@protoc_insertion_point(field_release:sm.ManagerToCoreMessage.typesFilter)
  clear_has_typesfilter();
  ::sm::TypesFilter* temp = typesfilter_;
  typesfilter_ = NULL;
  return temp;
}
void ManagerToCoreMessage::set_allocated_typesfilter(::sm::TypesFilter* typesfilter) {
  delete typesfilter_;
  typesfilter_ = typesfilter;
  if (typesfilter) {
    set_has_typesfilter();
  } else {
    clear_has_typesfilter();
  }
  // @@protoc_insertion_point(field_set_allocated:sm.ManagerToCoreMessage.typesFilter)
}

// optional .sm.QualityFilter qualityFilter = 5;
bool ManagerToCoreMessage::has_qualityfilter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ManagerToCoreMessage::set_has_qualityfilter() {
  _has_bits_[0] |= 0x00000010u;
}
void ManagerToCoreMessage::clear_has_qualityfilter() {
  _has_bits_[0] &= ~0x00000010u;
}
void ManagerToCoreMessage::clear_qualityfilter() {
  if (qualityfilter_ != NULL) qualityfilter_->::sm::QualityFilter::Clear();
  clear_has_qualityfilter();
}
const ::sm::QualityFilter& ManagerToCoreMessage::qualityfilter() const {
  // @@protoc_insertion_point(field_get:sm.ManagerToCoreMessage.qualityFilter)
  return qualityfilter_ != NULL ? *qualityfilter_ : *default_instance_->qualityfilter_;
}
::sm::QualityFilter* ManagerToCoreMessage::mutable_qualityfilter() {
  set_has_qualityfilter();
  if (qualityfilter_ == NULL) {
    qualityfilter_ = new ::sm::QualityFilter;
  }
  // @@protoc_insertion_point(field_mutable:sm.ManagerToCoreMessage.qualityFilter)
  return qualityfilter_;
}
::sm::QualityFilter* ManagerToCoreMessage::release_qualityfilter() {
  // @@protoc_insertion_point(field_release:sm.ManagerToCoreMessage.qualityFilter)
  clear_has_qualityfilter();
  ::sm::QualityFilter* temp = qualityfilter_;
  qualityfilter_ = NULL;
  return temp;
}
void ManagerToCoreMessage::set_allocated_qualityfilter(::sm::QualityFilter* qualityfilter) {
  delete qualityfilter_;
  qualityfilter_ = qualityfilter;
  if (qualityfilter) {
    set_has_qualityfilter();
  } else {
    clear_has_qualityfilter();
  }
  // @@protoc_insertion_point(field_set_allocated:sm.ManagerToCoreMessage.qualityFilter)
}

// optional .sm.CoordinatesFilter coordinatesFilter = 6;
bool ManagerToCoreMessage::has_coordinatesfilter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ManagerToCoreMessage::set_has_coordinatesfilter() {
  _has_bits_[0] |= 0x00000020u;
}
void ManagerToCoreMessage::clear_has_coordinatesfilter() {
  _has_bits_[0] &= ~0x00000020u;
}
void ManagerToCoreMessage::clear_coordinatesfilter() {
  if (coordinatesfilter_ != NULL) coordinatesfilter_->::sm::CoordinatesFilter::Clear();
  clear_has_coordinatesfilter();
}
const ::sm::CoordinatesFilter& ManagerToCoreMessage::coordinatesfilter() const {
  // @@protoc_insertion_point(field_get:sm.ManagerToCoreMessage.coordinatesFilter)
  return coordinatesfilter_ != NULL ? *coordinatesfilter_ : *default_instance_->coordinatesfilter_;
}
::sm::CoordinatesFilter* ManagerToCoreMessage::mutable_coordinatesfilter() {
  set_has_coordinatesfilter();
  if (coordinatesfilter_ == NULL) {
    coordinatesfilter_ = new ::sm::CoordinatesFilter;
  }
  // @@protoc_insertion_point(field_mutable:sm.ManagerToCoreMessage.coordinatesFilter)
  return coordinatesfilter_;
}
::sm::CoordinatesFilter* ManagerToCoreMessage::release_coordinatesfilter() {
  // @@protoc_insertion_point(field_release:sm.ManagerToCoreMessage.coordinatesFilter)
  clear_has_coordinatesfilter();
  ::sm::CoordinatesFilter* temp = coordinatesfilter_;
  coordinatesfilter_ = NULL;
  return temp;
}
void ManagerToCoreMessage::set_allocated_coordinatesfilter(::sm::CoordinatesFilter* coordinatesfilter) {
  delete coordinatesfilter_;
  coordinatesfilter_ = coordinatesfilter;
  if (coordinatesfilter) {
    set_has_coordinatesfilter();
  } else {
    clear_has_coordinatesfilter();
  }
  // @@protoc_insertion_point(field_set_allocated:sm.ManagerToCoreMessage.coordinatesFilter)
}

// optional string objFilePath = 7;
bool ManagerToCoreMessage::has_objfilepath() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ManagerToCoreMessage::set_has_objfilepath() {
  _has_bits_[0] |= 0x00000040u;
}
void ManagerToCoreMessage::clear_has_objfilepath() {
  _has_bits_[0] &= ~0x00000040u;
}
void ManagerToCoreMessage::clear_objfilepath() {
  objfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_objfilepath();
}
 const ::std::string& ManagerToCoreMessage::objfilepath() const {
  // @@protoc_insertion_point(field_get:sm.ManagerToCoreMessage.objFilePath)
  return objfilepath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ManagerToCoreMessage::set_objfilepath(const ::std::string& value) {
  set_has_objfilepath();
  objfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sm.ManagerToCoreMessage.objFilePath)
}
 void ManagerToCoreMessage::set_objfilepath(const char* value) {
  set_has_objfilepath();
  objfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sm.ManagerToCoreMessage.objFilePath)
}
 void ManagerToCoreMessage::set_objfilepath(const char* value, size_t size) {
  set_has_objfilepath();
  objfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sm.ManagerToCoreMessage.objFilePath)
}
 ::std::string* ManagerToCoreMessage::mutable_objfilepath() {
  set_has_objfilepath();
  // @@protoc_insertion_point(field_mutable:sm.ManagerToCoreMessage.objFilePath)
  return objfilepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ManagerToCoreMessage::release_objfilepath() {
  // @@protoc_insertion_point(field_release:sm.ManagerToCoreMessage.objFilePath)
  clear_has_objfilepath();
  return objfilepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ManagerToCoreMessage::set_allocated_objfilepath(::std::string* objfilepath) {
  if (objfilepath != NULL) {
    set_has_objfilepath();
  } else {
    clear_has_objfilepath();
  }
  objfilepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), objfilepath);
  // @@protoc_insertion_point(field_set_allocated:sm.ManagerToCoreMessage.objFilePath)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sm

// @@protoc_insertion_point(global_scope)
