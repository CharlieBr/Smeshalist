// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structs.proto

#ifndef PROTOBUF_structs_2eproto__INCLUDED
#define PROTOBUF_structs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace structDefinitions {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_structs_2eproto();
void protobuf_AssignDesc_structs_2eproto();
void protobuf_ShutdownFile_structs_2eproto();

class Point2D;
class Point2DSet;
class Point3D;
class Point3DSet;
class Vertex;
class VertexSet;
class Edge;
class EdgeSet;
class TriangleFace;
class TriangleFaceSet;
class Block;
class Blocks;

// ===================================================================

class Point2D : public ::google::protobuf::Message {
 public:
  Point2D();
  virtual ~Point2D();

  Point2D(const Point2D& from);

  inline Point2D& operator=(const Point2D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point2D& default_instance();

  void Swap(Point2D* other);

  // implements Message ----------------------------------------------

  Point2D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point2D& from);
  void MergeFrom(const Point2D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // @@protoc_insertion_point(class_scope:structDefinitions.Point2D)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  friend void  protobuf_AddDesc_structs_2eproto();
  friend void protobuf_AssignDesc_structs_2eproto();
  friend void protobuf_ShutdownFile_structs_2eproto();

  void InitAsDefaultInstance();
  static Point2D* default_instance_;
};
// -------------------------------------------------------------------

class Point2DSet : public ::google::protobuf::Message {
 public:
  Point2DSet();
  virtual ~Point2DSet();

  Point2DSet(const Point2DSet& from);

  inline Point2DSet& operator=(const Point2DSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point2DSet& default_instance();

  void Swap(Point2DSet* other);

  // implements Message ----------------------------------------------

  Point2DSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point2DSet& from);
  void MergeFrom(const Point2DSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .structDefinitions.Point2D points = 1;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 1;
  inline const ::structDefinitions::Point2D& points(int index) const;
  inline ::structDefinitions::Point2D* mutable_points(int index);
  inline ::structDefinitions::Point2D* add_points();
  inline const ::google::protobuf::RepeatedPtrField< ::structDefinitions::Point2D >&
      points() const;
  inline ::google::protobuf::RepeatedPtrField< ::structDefinitions::Point2D >*
      mutable_points();

  // @@protoc_insertion_point(class_scope:structDefinitions.Point2DSet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::structDefinitions::Point2D > points_;
  friend void  protobuf_AddDesc_structs_2eproto();
  friend void protobuf_AssignDesc_structs_2eproto();
  friend void protobuf_ShutdownFile_structs_2eproto();

  void InitAsDefaultInstance();
  static Point2DSet* default_instance_;
};
// -------------------------------------------------------------------

class Point3D : public ::google::protobuf::Message {
 public:
  Point3D();
  virtual ~Point3D();

  Point3D(const Point3D& from);

  inline Point3D& operator=(const Point3D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point3D& default_instance();

  void Swap(Point3D* other);

  // implements Message ----------------------------------------------

  Point3D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point3D& from);
  void MergeFrom(const Point3D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // required double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);

  // @@protoc_insertion_point(class_scope:structDefinitions.Point3D)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend void  protobuf_AddDesc_structs_2eproto();
  friend void protobuf_AssignDesc_structs_2eproto();
  friend void protobuf_ShutdownFile_structs_2eproto();

  void InitAsDefaultInstance();
  static Point3D* default_instance_;
};
// -------------------------------------------------------------------

class Point3DSet : public ::google::protobuf::Message {
 public:
  Point3DSet();
  virtual ~Point3DSet();

  Point3DSet(const Point3DSet& from);

  inline Point3DSet& operator=(const Point3DSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point3DSet& default_instance();

  void Swap(Point3DSet* other);

  // implements Message ----------------------------------------------

  Point3DSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point3DSet& from);
  void MergeFrom(const Point3DSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .structDefinitions.Point3D points = 1;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 1;
  inline const ::structDefinitions::Point3D& points(int index) const;
  inline ::structDefinitions::Point3D* mutable_points(int index);
  inline ::structDefinitions::Point3D* add_points();
  inline const ::google::protobuf::RepeatedPtrField< ::structDefinitions::Point3D >&
      points() const;
  inline ::google::protobuf::RepeatedPtrField< ::structDefinitions::Point3D >*
      mutable_points();

  // @@protoc_insertion_point(class_scope:structDefinitions.Point3DSet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::structDefinitions::Point3D > points_;
  friend void  protobuf_AddDesc_structs_2eproto();
  friend void protobuf_AssignDesc_structs_2eproto();
  friend void protobuf_ShutdownFile_structs_2eproto();

  void InitAsDefaultInstance();
  static Point3DSet* default_instance_;
};
// -------------------------------------------------------------------

class Vertex : public ::google::protobuf::Message {
 public:
  Vertex();
  virtual ~Vertex();

  Vertex(const Vertex& from);

  inline Vertex& operator=(const Vertex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vertex& default_instance();

  void Swap(Vertex* other);

  // implements Message ----------------------------------------------

  Vertex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vertex& from);
  void MergeFrom(const Vertex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .structDefinitions.Point3D point = 1;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 1;
  inline const ::structDefinitions::Point3D& point() const;
  inline ::structDefinitions::Point3D* mutable_point();
  inline ::structDefinitions::Point3D* release_point();
  inline void set_allocated_point(::structDefinitions::Point3D* point);

  // required double number = 2;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 2;
  inline double number() const;
  inline void set_number(double value);

  // @@protoc_insertion_point(class_scope:structDefinitions.Vertex)
 private:
  inline void set_has_point();
  inline void clear_has_point();
  inline void set_has_number();
  inline void clear_has_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::structDefinitions::Point3D* point_;
  double number_;
  friend void  protobuf_AddDesc_structs_2eproto();
  friend void protobuf_AssignDesc_structs_2eproto();
  friend void protobuf_ShutdownFile_structs_2eproto();

  void InitAsDefaultInstance();
  static Vertex* default_instance_;
};
// -------------------------------------------------------------------

class VertexSet : public ::google::protobuf::Message {
 public:
  VertexSet();
  virtual ~VertexSet();

  VertexSet(const VertexSet& from);

  inline VertexSet& operator=(const VertexSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VertexSet& default_instance();

  void Swap(VertexSet* other);

  // implements Message ----------------------------------------------

  VertexSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VertexSet& from);
  void MergeFrom(const VertexSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .structDefinitions.Vertex vertexes = 1;
  inline int vertexes_size() const;
  inline void clear_vertexes();
  static const int kVertexesFieldNumber = 1;
  inline const ::structDefinitions::Vertex& vertexes(int index) const;
  inline ::structDefinitions::Vertex* mutable_vertexes(int index);
  inline ::structDefinitions::Vertex* add_vertexes();
  inline const ::google::protobuf::RepeatedPtrField< ::structDefinitions::Vertex >&
      vertexes() const;
  inline ::google::protobuf::RepeatedPtrField< ::structDefinitions::Vertex >*
      mutable_vertexes();

  // @@protoc_insertion_point(class_scope:structDefinitions.VertexSet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::structDefinitions::Vertex > vertexes_;
  friend void  protobuf_AddDesc_structs_2eproto();
  friend void protobuf_AssignDesc_structs_2eproto();
  friend void protobuf_ShutdownFile_structs_2eproto();

  void InitAsDefaultInstance();
  static VertexSet* default_instance_;
};
// -------------------------------------------------------------------

class Edge : public ::google::protobuf::Message {
 public:
  Edge();
  virtual ~Edge();

  Edge(const Edge& from);

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Edge& default_instance();

  void Swap(Edge* other);

  // implements Message ----------------------------------------------

  Edge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Edge& from);
  void MergeFrom(const Edge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .structDefinitions.Point3D v1 = 1;
  inline bool has_v1() const;
  inline void clear_v1();
  static const int kV1FieldNumber = 1;
  inline const ::structDefinitions::Point3D& v1() const;
  inline ::structDefinitions::Point3D* mutable_v1();
  inline ::structDefinitions::Point3D* release_v1();
  inline void set_allocated_v1(::structDefinitions::Point3D* v1);

  // required .structDefinitions.Point3D v2 = 2;
  inline bool has_v2() const;
  inline void clear_v2();
  static const int kV2FieldNumber = 2;
  inline const ::structDefinitions::Point3D& v2() const;
  inline ::structDefinitions::Point3D* mutable_v2();
  inline ::structDefinitions::Point3D* release_v2();
  inline void set_allocated_v2(::structDefinitions::Point3D* v2);

  // @@protoc_insertion_point(class_scope:structDefinitions.Edge)
 private:
  inline void set_has_v1();
  inline void clear_has_v1();
  inline void set_has_v2();
  inline void clear_has_v2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::structDefinitions::Point3D* v1_;
  ::structDefinitions::Point3D* v2_;
  friend void  protobuf_AddDesc_structs_2eproto();
  friend void protobuf_AssignDesc_structs_2eproto();
  friend void protobuf_ShutdownFile_structs_2eproto();

  void InitAsDefaultInstance();
  static Edge* default_instance_;
};
// -------------------------------------------------------------------

class EdgeSet : public ::google::protobuf::Message {
 public:
  EdgeSet();
  virtual ~EdgeSet();

  EdgeSet(const EdgeSet& from);

  inline EdgeSet& operator=(const EdgeSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EdgeSet& default_instance();

  void Swap(EdgeSet* other);

  // implements Message ----------------------------------------------

  EdgeSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EdgeSet& from);
  void MergeFrom(const EdgeSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .structDefinitions.Edge edges = 1;
  inline int edges_size() const;
  inline void clear_edges();
  static const int kEdgesFieldNumber = 1;
  inline const ::structDefinitions::Edge& edges(int index) const;
  inline ::structDefinitions::Edge* mutable_edges(int index);
  inline ::structDefinitions::Edge* add_edges();
  inline const ::google::protobuf::RepeatedPtrField< ::structDefinitions::Edge >&
      edges() const;
  inline ::google::protobuf::RepeatedPtrField< ::structDefinitions::Edge >*
      mutable_edges();

  // @@protoc_insertion_point(class_scope:structDefinitions.EdgeSet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::structDefinitions::Edge > edges_;
  friend void  protobuf_AddDesc_structs_2eproto();
  friend void protobuf_AssignDesc_structs_2eproto();
  friend void protobuf_ShutdownFile_structs_2eproto();

  void InitAsDefaultInstance();
  static EdgeSet* default_instance_;
};
// -------------------------------------------------------------------

class TriangleFace : public ::google::protobuf::Message {
 public:
  TriangleFace();
  virtual ~TriangleFace();

  TriangleFace(const TriangleFace& from);

  inline TriangleFace& operator=(const TriangleFace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TriangleFace& default_instance();

  void Swap(TriangleFace* other);

  // implements Message ----------------------------------------------

  TriangleFace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TriangleFace& from);
  void MergeFrom(const TriangleFace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .structDefinitions.Point3D v1 = 1;
  inline bool has_v1() const;
  inline void clear_v1();
  static const int kV1FieldNumber = 1;
  inline const ::structDefinitions::Point3D& v1() const;
  inline ::structDefinitions::Point3D* mutable_v1();
  inline ::structDefinitions::Point3D* release_v1();
  inline void set_allocated_v1(::structDefinitions::Point3D* v1);

  // required .structDefinitions.Point3D v2 = 2;
  inline bool has_v2() const;
  inline void clear_v2();
  static const int kV2FieldNumber = 2;
  inline const ::structDefinitions::Point3D& v2() const;
  inline ::structDefinitions::Point3D* mutable_v2();
  inline ::structDefinitions::Point3D* release_v2();
  inline void set_allocated_v2(::structDefinitions::Point3D* v2);

  // required .structDefinitions.Point3D v3 = 3;
  inline bool has_v3() const;
  inline void clear_v3();
  static const int kV3FieldNumber = 3;
  inline const ::structDefinitions::Point3D& v3() const;
  inline ::structDefinitions::Point3D* mutable_v3();
  inline ::structDefinitions::Point3D* release_v3();
  inline void set_allocated_v3(::structDefinitions::Point3D* v3);

  // @@protoc_insertion_point(class_scope:structDefinitions.TriangleFace)
 private:
  inline void set_has_v1();
  inline void clear_has_v1();
  inline void set_has_v2();
  inline void clear_has_v2();
  inline void set_has_v3();
  inline void clear_has_v3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::structDefinitions::Point3D* v1_;
  ::structDefinitions::Point3D* v2_;
  ::structDefinitions::Point3D* v3_;
  friend void  protobuf_AddDesc_structs_2eproto();
  friend void protobuf_AssignDesc_structs_2eproto();
  friend void protobuf_ShutdownFile_structs_2eproto();

  void InitAsDefaultInstance();
  static TriangleFace* default_instance_;
};
// -------------------------------------------------------------------

class TriangleFaceSet : public ::google::protobuf::Message {
 public:
  TriangleFaceSet();
  virtual ~TriangleFaceSet();

  TriangleFaceSet(const TriangleFaceSet& from);

  inline TriangleFaceSet& operator=(const TriangleFaceSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TriangleFaceSet& default_instance();

  void Swap(TriangleFaceSet* other);

  // implements Message ----------------------------------------------

  TriangleFaceSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TriangleFaceSet& from);
  void MergeFrom(const TriangleFaceSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .structDefinitions.TriangleFace triangleFaces = 1;
  inline int trianglefaces_size() const;
  inline void clear_trianglefaces();
  static const int kTriangleFacesFieldNumber = 1;
  inline const ::structDefinitions::TriangleFace& trianglefaces(int index) const;
  inline ::structDefinitions::TriangleFace* mutable_trianglefaces(int index);
  inline ::structDefinitions::TriangleFace* add_trianglefaces();
  inline const ::google::protobuf::RepeatedPtrField< ::structDefinitions::TriangleFace >&
      trianglefaces() const;
  inline ::google::protobuf::RepeatedPtrField< ::structDefinitions::TriangleFace >*
      mutable_trianglefaces();

  // @@protoc_insertion_point(class_scope:structDefinitions.TriangleFaceSet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::structDefinitions::TriangleFace > trianglefaces_;
  friend void  protobuf_AddDesc_structs_2eproto();
  friend void protobuf_AssignDesc_structs_2eproto();
  friend void protobuf_ShutdownFile_structs_2eproto();

  void InitAsDefaultInstance();
  static TriangleFaceSet* default_instance_;
};
// -------------------------------------------------------------------

class Block : public ::google::protobuf::Message {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Block& default_instance();

  void Swap(Block* other);

  // implements Message ----------------------------------------------

  Block* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .structDefinitions.Point3D v1 = 1;
  inline bool has_v1() const;
  inline void clear_v1();
  static const int kV1FieldNumber = 1;
  inline const ::structDefinitions::Point3D& v1() const;
  inline ::structDefinitions::Point3D* mutable_v1();
  inline ::structDefinitions::Point3D* release_v1();
  inline void set_allocated_v1(::structDefinitions::Point3D* v1);

  // required .structDefinitions.Point3D v2 = 2;
  inline bool has_v2() const;
  inline void clear_v2();
  static const int kV2FieldNumber = 2;
  inline const ::structDefinitions::Point3D& v2() const;
  inline ::structDefinitions::Point3D* mutable_v2();
  inline ::structDefinitions::Point3D* release_v2();
  inline void set_allocated_v2(::structDefinitions::Point3D* v2);

  // required .structDefinitions.Point3D v3 = 3;
  inline bool has_v3() const;
  inline void clear_v3();
  static const int kV3FieldNumber = 3;
  inline const ::structDefinitions::Point3D& v3() const;
  inline ::structDefinitions::Point3D* mutable_v3();
  inline ::structDefinitions::Point3D* release_v3();
  inline void set_allocated_v3(::structDefinitions::Point3D* v3);

  // required .structDefinitions.Point3D v4 = 4;
  inline bool has_v4() const;
  inline void clear_v4();
  static const int kV4FieldNumber = 4;
  inline const ::structDefinitions::Point3D& v4() const;
  inline ::structDefinitions::Point3D* mutable_v4();
  inline ::structDefinitions::Point3D* release_v4();
  inline void set_allocated_v4(::structDefinitions::Point3D* v4);

  // @@protoc_insertion_point(class_scope:structDefinitions.Block)
 private:
  inline void set_has_v1();
  inline void clear_has_v1();
  inline void set_has_v2();
  inline void clear_has_v2();
  inline void set_has_v3();
  inline void clear_has_v3();
  inline void set_has_v4();
  inline void clear_has_v4();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::structDefinitions::Point3D* v1_;
  ::structDefinitions::Point3D* v2_;
  ::structDefinitions::Point3D* v3_;
  ::structDefinitions::Point3D* v4_;
  friend void  protobuf_AddDesc_structs_2eproto();
  friend void protobuf_AssignDesc_structs_2eproto();
  friend void protobuf_ShutdownFile_structs_2eproto();

  void InitAsDefaultInstance();
  static Block* default_instance_;
};
// -------------------------------------------------------------------

class Blocks : public ::google::protobuf::Message {
 public:
  Blocks();
  virtual ~Blocks();

  Blocks(const Blocks& from);

  inline Blocks& operator=(const Blocks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Blocks& default_instance();

  void Swap(Blocks* other);

  // implements Message ----------------------------------------------

  Blocks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Blocks& from);
  void MergeFrom(const Blocks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .structDefinitions.Block blocks = 1;
  inline int blocks_size() const;
  inline void clear_blocks();
  static const int kBlocksFieldNumber = 1;
  inline const ::structDefinitions::Block& blocks(int index) const;
  inline ::structDefinitions::Block* mutable_blocks(int index);
  inline ::structDefinitions::Block* add_blocks();
  inline const ::google::protobuf::RepeatedPtrField< ::structDefinitions::Block >&
      blocks() const;
  inline ::google::protobuf::RepeatedPtrField< ::structDefinitions::Block >*
      mutable_blocks();

  // @@protoc_insertion_point(class_scope:structDefinitions.Blocks)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::structDefinitions::Block > blocks_;
  friend void  protobuf_AddDesc_structs_2eproto();
  friend void protobuf_AssignDesc_structs_2eproto();
  friend void protobuf_ShutdownFile_structs_2eproto();

  void InitAsDefaultInstance();
  static Blocks* default_instance_;
};
// ===================================================================


// ===================================================================

// Point2D

// required double x = 1;
inline bool Point2D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point2D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point2D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point2D::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Point2D::x() const {
  // @@protoc_insertion_point(field_get:structDefinitions.Point2D.x)
  return x_;
}
inline void Point2D::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:structDefinitions.Point2D.x)
}

// required double y = 2;
inline bool Point2D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point2D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point2D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point2D::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Point2D::y() const {
  // @@protoc_insertion_point(field_get:structDefinitions.Point2D.y)
  return y_;
}
inline void Point2D::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:structDefinitions.Point2D.y)
}

// -------------------------------------------------------------------

// Point2DSet

// repeated .structDefinitions.Point2D points = 1;
inline int Point2DSet::points_size() const {
  return points_.size();
}
inline void Point2DSet::clear_points() {
  points_.Clear();
}
inline const ::structDefinitions::Point2D& Point2DSet::points(int index) const {
  // @@protoc_insertion_point(field_get:structDefinitions.Point2DSet.points)
  return points_.Get(index);
}
inline ::structDefinitions::Point2D* Point2DSet::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:structDefinitions.Point2DSet.points)
  return points_.Mutable(index);
}
inline ::structDefinitions::Point2D* Point2DSet::add_points() {
  // @@protoc_insertion_point(field_add:structDefinitions.Point2DSet.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::structDefinitions::Point2D >&
Point2DSet::points() const {
  // @@protoc_insertion_point(field_list:structDefinitions.Point2DSet.points)
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::structDefinitions::Point2D >*
Point2DSet::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:structDefinitions.Point2DSet.points)
  return &points_;
}

// -------------------------------------------------------------------

// Point3D

// required double x = 1;
inline bool Point3D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point3D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point3D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point3D::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Point3D::x() const {
  // @@protoc_insertion_point(field_get:structDefinitions.Point3D.x)
  return x_;
}
inline void Point3D::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:structDefinitions.Point3D.x)
}

// required double y = 2;
inline bool Point3D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point3D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point3D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point3D::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Point3D::y() const {
  // @@protoc_insertion_point(field_get:structDefinitions.Point3D.y)
  return y_;
}
inline void Point3D::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:structDefinitions.Point3D.y)
}

// required double z = 3;
inline bool Point3D::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point3D::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point3D::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point3D::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Point3D::z() const {
  // @@protoc_insertion_point(field_get:structDefinitions.Point3D.z)
  return z_;
}
inline void Point3D::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:structDefinitions.Point3D.z)
}

// -------------------------------------------------------------------

// Point3DSet

// repeated .structDefinitions.Point3D points = 1;
inline int Point3DSet::points_size() const {
  return points_.size();
}
inline void Point3DSet::clear_points() {
  points_.Clear();
}
inline const ::structDefinitions::Point3D& Point3DSet::points(int index) const {
  // @@protoc_insertion_point(field_get:structDefinitions.Point3DSet.points)
  return points_.Get(index);
}
inline ::structDefinitions::Point3D* Point3DSet::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:structDefinitions.Point3DSet.points)
  return points_.Mutable(index);
}
inline ::structDefinitions::Point3D* Point3DSet::add_points() {
  // @@protoc_insertion_point(field_add:structDefinitions.Point3DSet.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::structDefinitions::Point3D >&
Point3DSet::points() const {
  // @@protoc_insertion_point(field_list:structDefinitions.Point3DSet.points)
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::structDefinitions::Point3D >*
Point3DSet::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:structDefinitions.Point3DSet.points)
  return &points_;
}

// -------------------------------------------------------------------

// Vertex

// required .structDefinitions.Point3D point = 1;
inline bool Vertex::has_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vertex::set_has_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vertex::clear_has_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vertex::clear_point() {
  if (point_ != NULL) point_->::structDefinitions::Point3D::Clear();
  clear_has_point();
}
inline const ::structDefinitions::Point3D& Vertex::point() const {
  // @@protoc_insertion_point(field_get:structDefinitions.Vertex.point)
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
inline ::structDefinitions::Point3D* Vertex::mutable_point() {
  set_has_point();
  if (point_ == NULL) point_ = new ::structDefinitions::Point3D;
  // @@protoc_insertion_point(field_mutable:structDefinitions.Vertex.point)
  return point_;
}
inline ::structDefinitions::Point3D* Vertex::release_point() {
  clear_has_point();
  ::structDefinitions::Point3D* temp = point_;
  point_ = NULL;
  return temp;
}
inline void Vertex::set_allocated_point(::structDefinitions::Point3D* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
  // @@protoc_insertion_point(field_set_allocated:structDefinitions.Vertex.point)
}

// required double number = 2;
inline bool Vertex::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vertex::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vertex::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vertex::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline double Vertex::number() const {
  // @@protoc_insertion_point(field_get:structDefinitions.Vertex.number)
  return number_;
}
inline void Vertex::set_number(double value) {
  set_has_number();
  number_ = value;
  // @@protoc_insertion_point(field_set:structDefinitions.Vertex.number)
}

// -------------------------------------------------------------------

// VertexSet

// repeated .structDefinitions.Vertex vertexes = 1;
inline int VertexSet::vertexes_size() const {
  return vertexes_.size();
}
inline void VertexSet::clear_vertexes() {
  vertexes_.Clear();
}
inline const ::structDefinitions::Vertex& VertexSet::vertexes(int index) const {
  // @@protoc_insertion_point(field_get:structDefinitions.VertexSet.vertexes)
  return vertexes_.Get(index);
}
inline ::structDefinitions::Vertex* VertexSet::mutable_vertexes(int index) {
  // @@protoc_insertion_point(field_mutable:structDefinitions.VertexSet.vertexes)
  return vertexes_.Mutable(index);
}
inline ::structDefinitions::Vertex* VertexSet::add_vertexes() {
  // @@protoc_insertion_point(field_add:structDefinitions.VertexSet.vertexes)
  return vertexes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::structDefinitions::Vertex >&
VertexSet::vertexes() const {
  // @@protoc_insertion_point(field_list:structDefinitions.VertexSet.vertexes)
  return vertexes_;
}
inline ::google::protobuf::RepeatedPtrField< ::structDefinitions::Vertex >*
VertexSet::mutable_vertexes() {
  // @@protoc_insertion_point(field_mutable_list:structDefinitions.VertexSet.vertexes)
  return &vertexes_;
}

// -------------------------------------------------------------------

// Edge

// required .structDefinitions.Point3D v1 = 1;
inline bool Edge::has_v1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Edge::set_has_v1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Edge::clear_has_v1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Edge::clear_v1() {
  if (v1_ != NULL) v1_->::structDefinitions::Point3D::Clear();
  clear_has_v1();
}
inline const ::structDefinitions::Point3D& Edge::v1() const {
  // @@protoc_insertion_point(field_get:structDefinitions.Edge.v1)
  return v1_ != NULL ? *v1_ : *default_instance_->v1_;
}
inline ::structDefinitions::Point3D* Edge::mutable_v1() {
  set_has_v1();
  if (v1_ == NULL) v1_ = new ::structDefinitions::Point3D;
  // @@protoc_insertion_point(field_mutable:structDefinitions.Edge.v1)
  return v1_;
}
inline ::structDefinitions::Point3D* Edge::release_v1() {
  clear_has_v1();
  ::structDefinitions::Point3D* temp = v1_;
  v1_ = NULL;
  return temp;
}
inline void Edge::set_allocated_v1(::structDefinitions::Point3D* v1) {
  delete v1_;
  v1_ = v1;
  if (v1) {
    set_has_v1();
  } else {
    clear_has_v1();
  }
  // @@protoc_insertion_point(field_set_allocated:structDefinitions.Edge.v1)
}

// required .structDefinitions.Point3D v2 = 2;
inline bool Edge::has_v2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Edge::set_has_v2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Edge::clear_has_v2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Edge::clear_v2() {
  if (v2_ != NULL) v2_->::structDefinitions::Point3D::Clear();
  clear_has_v2();
}
inline const ::structDefinitions::Point3D& Edge::v2() const {
  // @@protoc_insertion_point(field_get:structDefinitions.Edge.v2)
  return v2_ != NULL ? *v2_ : *default_instance_->v2_;
}
inline ::structDefinitions::Point3D* Edge::mutable_v2() {
  set_has_v2();
  if (v2_ == NULL) v2_ = new ::structDefinitions::Point3D;
  // @@protoc_insertion_point(field_mutable:structDefinitions.Edge.v2)
  return v2_;
}
inline ::structDefinitions::Point3D* Edge::release_v2() {
  clear_has_v2();
  ::structDefinitions::Point3D* temp = v2_;
  v2_ = NULL;
  return temp;
}
inline void Edge::set_allocated_v2(::structDefinitions::Point3D* v2) {
  delete v2_;
  v2_ = v2;
  if (v2) {
    set_has_v2();
  } else {
    clear_has_v2();
  }
  // @@protoc_insertion_point(field_set_allocated:structDefinitions.Edge.v2)
}

// -------------------------------------------------------------------

// EdgeSet

// repeated .structDefinitions.Edge edges = 1;
inline int EdgeSet::edges_size() const {
  return edges_.size();
}
inline void EdgeSet::clear_edges() {
  edges_.Clear();
}
inline const ::structDefinitions::Edge& EdgeSet::edges(int index) const {
  // @@protoc_insertion_point(field_get:structDefinitions.EdgeSet.edges)
  return edges_.Get(index);
}
inline ::structDefinitions::Edge* EdgeSet::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:structDefinitions.EdgeSet.edges)
  return edges_.Mutable(index);
}
inline ::structDefinitions::Edge* EdgeSet::add_edges() {
  // @@protoc_insertion_point(field_add:structDefinitions.EdgeSet.edges)
  return edges_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::structDefinitions::Edge >&
EdgeSet::edges() const {
  // @@protoc_insertion_point(field_list:structDefinitions.EdgeSet.edges)
  return edges_;
}
inline ::google::protobuf::RepeatedPtrField< ::structDefinitions::Edge >*
EdgeSet::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:structDefinitions.EdgeSet.edges)
  return &edges_;
}

// -------------------------------------------------------------------

// TriangleFace

// required .structDefinitions.Point3D v1 = 1;
inline bool TriangleFace::has_v1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TriangleFace::set_has_v1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TriangleFace::clear_has_v1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TriangleFace::clear_v1() {
  if (v1_ != NULL) v1_->::structDefinitions::Point3D::Clear();
  clear_has_v1();
}
inline const ::structDefinitions::Point3D& TriangleFace::v1() const {
  // @@protoc_insertion_point(field_get:structDefinitions.TriangleFace.v1)
  return v1_ != NULL ? *v1_ : *default_instance_->v1_;
}
inline ::structDefinitions::Point3D* TriangleFace::mutable_v1() {
  set_has_v1();
  if (v1_ == NULL) v1_ = new ::structDefinitions::Point3D;
  // @@protoc_insertion_point(field_mutable:structDefinitions.TriangleFace.v1)
  return v1_;
}
inline ::structDefinitions::Point3D* TriangleFace::release_v1() {
  clear_has_v1();
  ::structDefinitions::Point3D* temp = v1_;
  v1_ = NULL;
  return temp;
}
inline void TriangleFace::set_allocated_v1(::structDefinitions::Point3D* v1) {
  delete v1_;
  v1_ = v1;
  if (v1) {
    set_has_v1();
  } else {
    clear_has_v1();
  }
  // @@protoc_insertion_point(field_set_allocated:structDefinitions.TriangleFace.v1)
}

// required .structDefinitions.Point3D v2 = 2;
inline bool TriangleFace::has_v2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TriangleFace::set_has_v2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TriangleFace::clear_has_v2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TriangleFace::clear_v2() {
  if (v2_ != NULL) v2_->::structDefinitions::Point3D::Clear();
  clear_has_v2();
}
inline const ::structDefinitions::Point3D& TriangleFace::v2() const {
  // @@protoc_insertion_point(field_get:structDefinitions.TriangleFace.v2)
  return v2_ != NULL ? *v2_ : *default_instance_->v2_;
}
inline ::structDefinitions::Point3D* TriangleFace::mutable_v2() {
  set_has_v2();
  if (v2_ == NULL) v2_ = new ::structDefinitions::Point3D;
  // @@protoc_insertion_point(field_mutable:structDefinitions.TriangleFace.v2)
  return v2_;
}
inline ::structDefinitions::Point3D* TriangleFace::release_v2() {
  clear_has_v2();
  ::structDefinitions::Point3D* temp = v2_;
  v2_ = NULL;
  return temp;
}
inline void TriangleFace::set_allocated_v2(::structDefinitions::Point3D* v2) {
  delete v2_;
  v2_ = v2;
  if (v2) {
    set_has_v2();
  } else {
    clear_has_v2();
  }
  // @@protoc_insertion_point(field_set_allocated:structDefinitions.TriangleFace.v2)
}

// required .structDefinitions.Point3D v3 = 3;
inline bool TriangleFace::has_v3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TriangleFace::set_has_v3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TriangleFace::clear_has_v3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TriangleFace::clear_v3() {
  if (v3_ != NULL) v3_->::structDefinitions::Point3D::Clear();
  clear_has_v3();
}
inline const ::structDefinitions::Point3D& TriangleFace::v3() const {
  // @@protoc_insertion_point(field_get:structDefinitions.TriangleFace.v3)
  return v3_ != NULL ? *v3_ : *default_instance_->v3_;
}
inline ::structDefinitions::Point3D* TriangleFace::mutable_v3() {
  set_has_v3();
  if (v3_ == NULL) v3_ = new ::structDefinitions::Point3D;
  // @@protoc_insertion_point(field_mutable:structDefinitions.TriangleFace.v3)
  return v3_;
}
inline ::structDefinitions::Point3D* TriangleFace::release_v3() {
  clear_has_v3();
  ::structDefinitions::Point3D* temp = v3_;
  v3_ = NULL;
  return temp;
}
inline void TriangleFace::set_allocated_v3(::structDefinitions::Point3D* v3) {
  delete v3_;
  v3_ = v3;
  if (v3) {
    set_has_v3();
  } else {
    clear_has_v3();
  }
  // @@protoc_insertion_point(field_set_allocated:structDefinitions.TriangleFace.v3)
}

// -------------------------------------------------------------------

// TriangleFaceSet

// repeated .structDefinitions.TriangleFace triangleFaces = 1;
inline int TriangleFaceSet::trianglefaces_size() const {
  return trianglefaces_.size();
}
inline void TriangleFaceSet::clear_trianglefaces() {
  trianglefaces_.Clear();
}
inline const ::structDefinitions::TriangleFace& TriangleFaceSet::trianglefaces(int index) const {
  // @@protoc_insertion_point(field_get:structDefinitions.TriangleFaceSet.triangleFaces)
  return trianglefaces_.Get(index);
}
inline ::structDefinitions::TriangleFace* TriangleFaceSet::mutable_trianglefaces(int index) {
  // @@protoc_insertion_point(field_mutable:structDefinitions.TriangleFaceSet.triangleFaces)
  return trianglefaces_.Mutable(index);
}
inline ::structDefinitions::TriangleFace* TriangleFaceSet::add_trianglefaces() {
  // @@protoc_insertion_point(field_add:structDefinitions.TriangleFaceSet.triangleFaces)
  return trianglefaces_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::structDefinitions::TriangleFace >&
TriangleFaceSet::trianglefaces() const {
  // @@protoc_insertion_point(field_list:structDefinitions.TriangleFaceSet.triangleFaces)
  return trianglefaces_;
}
inline ::google::protobuf::RepeatedPtrField< ::structDefinitions::TriangleFace >*
TriangleFaceSet::mutable_trianglefaces() {
  // @@protoc_insertion_point(field_mutable_list:structDefinitions.TriangleFaceSet.triangleFaces)
  return &trianglefaces_;
}

// -------------------------------------------------------------------

// Block

// required .structDefinitions.Point3D v1 = 1;
inline bool Block::has_v1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Block::set_has_v1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Block::clear_has_v1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Block::clear_v1() {
  if (v1_ != NULL) v1_->::structDefinitions::Point3D::Clear();
  clear_has_v1();
}
inline const ::structDefinitions::Point3D& Block::v1() const {
  // @@protoc_insertion_point(field_get:structDefinitions.Block.v1)
  return v1_ != NULL ? *v1_ : *default_instance_->v1_;
}
inline ::structDefinitions::Point3D* Block::mutable_v1() {
  set_has_v1();
  if (v1_ == NULL) v1_ = new ::structDefinitions::Point3D;
  // @@protoc_insertion_point(field_mutable:structDefinitions.Block.v1)
  return v1_;
}
inline ::structDefinitions::Point3D* Block::release_v1() {
  clear_has_v1();
  ::structDefinitions::Point3D* temp = v1_;
  v1_ = NULL;
  return temp;
}
inline void Block::set_allocated_v1(::structDefinitions::Point3D* v1) {
  delete v1_;
  v1_ = v1;
  if (v1) {
    set_has_v1();
  } else {
    clear_has_v1();
  }
  // @@protoc_insertion_point(field_set_allocated:structDefinitions.Block.v1)
}

// required .structDefinitions.Point3D v2 = 2;
inline bool Block::has_v2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Block::set_has_v2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Block::clear_has_v2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Block::clear_v2() {
  if (v2_ != NULL) v2_->::structDefinitions::Point3D::Clear();
  clear_has_v2();
}
inline const ::structDefinitions::Point3D& Block::v2() const {
  // @@protoc_insertion_point(field_get:structDefinitions.Block.v2)
  return v2_ != NULL ? *v2_ : *default_instance_->v2_;
}
inline ::structDefinitions::Point3D* Block::mutable_v2() {
  set_has_v2();
  if (v2_ == NULL) v2_ = new ::structDefinitions::Point3D;
  // @@protoc_insertion_point(field_mutable:structDefinitions.Block.v2)
  return v2_;
}
inline ::structDefinitions::Point3D* Block::release_v2() {
  clear_has_v2();
  ::structDefinitions::Point3D* temp = v2_;
  v2_ = NULL;
  return temp;
}
inline void Block::set_allocated_v2(::structDefinitions::Point3D* v2) {
  delete v2_;
  v2_ = v2;
  if (v2) {
    set_has_v2();
  } else {
    clear_has_v2();
  }
  // @@protoc_insertion_point(field_set_allocated:structDefinitions.Block.v2)
}

// required .structDefinitions.Point3D v3 = 3;
inline bool Block::has_v3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Block::set_has_v3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Block::clear_has_v3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Block::clear_v3() {
  if (v3_ != NULL) v3_->::structDefinitions::Point3D::Clear();
  clear_has_v3();
}
inline const ::structDefinitions::Point3D& Block::v3() const {
  // @@protoc_insertion_point(field_get:structDefinitions.Block.v3)
  return v3_ != NULL ? *v3_ : *default_instance_->v3_;
}
inline ::structDefinitions::Point3D* Block::mutable_v3() {
  set_has_v3();
  if (v3_ == NULL) v3_ = new ::structDefinitions::Point3D;
  // @@protoc_insertion_point(field_mutable:structDefinitions.Block.v3)
  return v3_;
}
inline ::structDefinitions::Point3D* Block::release_v3() {
  clear_has_v3();
  ::structDefinitions::Point3D* temp = v3_;
  v3_ = NULL;
  return temp;
}
inline void Block::set_allocated_v3(::structDefinitions::Point3D* v3) {
  delete v3_;
  v3_ = v3;
  if (v3) {
    set_has_v3();
  } else {
    clear_has_v3();
  }
  // @@protoc_insertion_point(field_set_allocated:structDefinitions.Block.v3)
}

// required .structDefinitions.Point3D v4 = 4;
inline bool Block::has_v4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Block::set_has_v4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Block::clear_has_v4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Block::clear_v4() {
  if (v4_ != NULL) v4_->::structDefinitions::Point3D::Clear();
  clear_has_v4();
}
inline const ::structDefinitions::Point3D& Block::v4() const {
  // @@protoc_insertion_point(field_get:structDefinitions.Block.v4)
  return v4_ != NULL ? *v4_ : *default_instance_->v4_;
}
inline ::structDefinitions::Point3D* Block::mutable_v4() {
  set_has_v4();
  if (v4_ == NULL) v4_ = new ::structDefinitions::Point3D;
  // @@protoc_insertion_point(field_mutable:structDefinitions.Block.v4)
  return v4_;
}
inline ::structDefinitions::Point3D* Block::release_v4() {
  clear_has_v4();
  ::structDefinitions::Point3D* temp = v4_;
  v4_ = NULL;
  return temp;
}
inline void Block::set_allocated_v4(::structDefinitions::Point3D* v4) {
  delete v4_;
  v4_ = v4;
  if (v4) {
    set_has_v4();
  } else {
    clear_has_v4();
  }
  // @@protoc_insertion_point(field_set_allocated:structDefinitions.Block.v4)
}

// -------------------------------------------------------------------

// Blocks

// repeated .structDefinitions.Block blocks = 1;
inline int Blocks::blocks_size() const {
  return blocks_.size();
}
inline void Blocks::clear_blocks() {
  blocks_.Clear();
}
inline const ::structDefinitions::Block& Blocks::blocks(int index) const {
  // @@protoc_insertion_point(field_get:structDefinitions.Blocks.blocks)
  return blocks_.Get(index);
}
inline ::structDefinitions::Block* Blocks::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:structDefinitions.Blocks.blocks)
  return blocks_.Mutable(index);
}
inline ::structDefinitions::Block* Blocks::add_blocks() {
  // @@protoc_insertion_point(field_add:structDefinitions.Blocks.blocks)
  return blocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::structDefinitions::Block >&
Blocks::blocks() const {
  // @@protoc_insertion_point(field_list:structDefinitions.Blocks.blocks)
  return blocks_;
}
inline ::google::protobuf::RepeatedPtrField< ::structDefinitions::Block >*
Blocks::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:structDefinitions.Blocks.blocks)
  return &blocks_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace structDefinitions

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_structs_2eproto__INCLUDED
